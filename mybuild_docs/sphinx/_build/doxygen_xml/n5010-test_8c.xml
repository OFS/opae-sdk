<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="n5010-test_8c" kind="file" language="C++">
    <compoundname>n5010-test.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">errno.h</includes>
    <includes refid="error_8h" local="no">error.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">getopt.h</includes>
    <includes refid="fpga_8h" local="no">opae/fpga.h</includes>
    <includes local="no">uuid/uuid.h</includes>
    <includes local="no">endian.h</includes>
    <includes local="no">argsfilter.h</includes>
    <incdepgraph>
      <node id="10">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>endian.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="29">
        <label>opae/userclk.h</label>
        <link refid="userclk_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>errno.h</label>
      </node>
      <node id="27">
        <label>opae/version.h</label>
        <link refid="version_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>opae/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>opae/types_enum.h</label>
        <link refid="types__enum_8h"/>
      </node>
      <node id="31">
        <label>uuid/uuid.h</label>
      </node>
      <node id="9">
        <label>stddef.h</label>
      </node>
      <node id="1">
        <label>samples/n5010-test/n5010-test.c</label>
        <link refid="n5010-test_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>opae/manage.h</label>
        <link refid="manage_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>opae/metrics.h</label>
        <link refid="metrics_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>opae/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>opae/sysobject.h</label>
        <link refid="sysobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
      <node id="21">
        <label>opae/event.h</label>
        <link refid="event_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>opae/properties.h</label>
        <link refid="properties_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>time.h</label>
      </node>
      <node id="25">
        <label>opae/umsg.h</label>
        <link refid="umsg_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>opae/fpga.h</label>
        <link refid="fpga_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>opae/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>opae/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>getopt.h</label>
      </node>
      <node id="18">
        <label>opae/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>opae/mmio.h</label>
        <link refid="include_2opae_2mmio_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>argsfilter.h</label>
      </node>
      <node id="17">
        <label>opae/init.h</label>
        <link refid="init_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="15">
        <label>opae/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structn5010__test" prot="public">n5010_test</innerclass>
    <innerclass refid="structn5010" prot="public">n5010</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="n5010-test_8c_1a64d2514266ba20fce840e5648ef89199" prot="public" static="no">
        <name>DFH_EOL</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt; 40) &amp; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="43" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" prot="public" static="no">
        <name>DFH_NEXT</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt; 16) &amp; 0xffffff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="44" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1aca731dc493c4ea43958cb0435cdaa571" prot="public" static="no">
        <name>DFH_TYPE</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt; 60) &amp; 0xf)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="45" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a57df7e6b18c59c759284e4129b591829" prot="public" static="no">
        <name>DFH_TYPE_AFU</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="46" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a11fa2de5d944e400aca76489981f2bf5" prot="public" static="no">
        <name>DDR_TEST_MODE0_CTRL</name>
        <initializer>0x3000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="48" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1aafd7639b4452467ade798bbbb6495328" prot="public" static="no">
        <name>DDR_TEST_MODE0_STAT</name>
        <initializer>0x3008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="49" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1aa797184b69f2027cb914153bef518e6f" prot="public" static="no">
        <name>DDR_TEST_MODE1_CTRL</name>
        <initializer>0x3000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="51" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a6ad2ae5dc714ef052ac3c0615ff9d52d" prot="public" static="no">
        <name>DDR_TEST_MODE1_STAT</name>
        <initializer>0x3008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="52" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1af2a7dd16fe742a0cab2a0b44054299f6" prot="public" static="no">
        <name>DDR_TEST_MODE1_BANK_STAT</name>
        <param><defname>x</defname></param>
        <initializer>(0x3010 + 8 * x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="53" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1af6d4323e2c3b5bb514a847b9f3fd535e" prot="public" static="no">
        <name>HBM_TEST_PASS</name>
        <initializer>0x4000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="55" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a0cecb64eaade5d14e674207e514755b0" prot="public" static="no">
        <name>HBM_TEST_FAIL</name>
        <initializer>0x4008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="56" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1ad1c397afa5c85b9a28f073353ca9032c" prot="public" static="no">
        <name>HBM_TEST_TIMEOUT</name>
        <initializer>0x4010</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="57" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a2bf1b6f3be700790eed5fda6e84fa81e" prot="public" static="no">
        <name>HBM_TEST_CTRL</name>
        <initializer>0x4018</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="58" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1aee1428f73247ddf1841483bbd9f3928c" prot="public" static="no">
        <name>QDR_TEST_STAT</name>
        <initializer>0x5000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="60" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1acd20fcd6bd92565b6e0c8667b24815ea" prot="public" static="no">
        <name>QDR_FM</name>
        <initializer>0xff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="61" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a99cad47c77096e0eca94240aac7fc258" prot="public" static="no">
        <name>QDR_TEST_TIMEOUT</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt; 16) &amp; <ref refid="n5010-test_8c_1acd20fcd6bd92565b6e0c8667b24815ea" kindref="member">QDR_FM</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="62" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a59145ff07c3dfaf8ab18785b5e3efc9a" prot="public" static="no">
        <name>QDR_TEST_FAIL</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt;  8) &amp; <ref refid="n5010-test_8c_1acd20fcd6bd92565b6e0c8667b24815ea" kindref="member">QDR_FM</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="63" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a52603e510127491e9adcc19710c72ff8" prot="public" static="no">
        <name>QDR_TEST_PASS</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt;  0) &amp; <ref refid="n5010-test_8c_1acd20fcd6bd92565b6e0c8667b24815ea" kindref="member">QDR_FM</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="64" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a8dbe1ba9e62a18d9a588f473458978ce" prot="public" static="no">
        <name>QDR_TEST_CTRL</name>
        <initializer>0x5008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="66" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a000ba0c3445077186d306cac29ab41e9" prot="public" static="no">
        <name>ESRAM_TEST_STAT</name>
        <initializer>0x6000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="68" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a2b060f9438390e34799ed496075b28f0" prot="public" static="no">
        <name>ESRAM_FM</name>
        <initializer>0xffff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="69" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1aaacce65608c404b4aedc54f5afc8cd6a" prot="public" static="no">
        <name>ESRAM_TEST_TIMEOUT</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt; 32) &amp; <ref refid="n5010-test_8c_1a2b060f9438390e34799ed496075b28f0" kindref="member">ESRAM_FM</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="70" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1aec1f8e4c78da3130142597eb059a5c5d" prot="public" static="no">
        <name>ESRAM_TEST_FAIL</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt; 16) &amp; <ref refid="n5010-test_8c_1a2b060f9438390e34799ed496075b28f0" kindref="member">ESRAM_FM</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="71" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1ad2ef5ce635ab16f9c52bfb43c72ba959" prot="public" static="no">
        <name>ESRAM_TEST_PASS</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt;  0) &amp; <ref refid="n5010-test_8c_1a2b060f9438390e34799ed496075b28f0" kindref="member">ESRAM_FM</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="72" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1aba15ac25260eb5c478e49ea9bbc93c8f" prot="public" static="no">
        <name>ESRAM_TEST_CTRL</name>
        <initializer>0x6008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="74" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-test_8c_1a31e69e55e98d6aa055fb6a352bb0feef" prot="public" static="no">
        <name>MAX_POLLS</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="76" column="9" bodyfile="samples/n5010-test/n5010-test.c" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="n5010-test_8c_1a0583be682de6cecd33c5d44955e5ee66" prot="public" static="yes" mutable="no">
        <type>const struct <ref refid="structn5010__test" kindref="compound">n5010_test</ref></type>
        <definition>const struct n5010_test n5010_test[]</definition>
        <argsstring>[]</argsstring>
        <name>n5010_test</name>
        <initializer>= {
	{
		.name = &quot;hbm&quot;,
		.func = <ref refid="n5010-test_8c_1ae92a916f3955b96edf4ef7ab5a667114" kindref="member">fpga_test_hbm</ref>,
	},
	{
		.name = &quot;ddr-directed&quot;,
		.func = <ref refid="n5010-test_8c_1a66f9a1b5d37745c9587641613bf50cd5" kindref="member">fpga_test_ddr_directed</ref>,
	},
	{
		.name = &quot;ddr-prbs&quot;,
		.func = <ref refid="n5010-test_8c_1a4a327a70c05938aa6ecda3e2e9225663" kindref="member">fpga_test_ddr_prbs</ref>,
	},
	{
		.name = &quot;esram&quot;,
		.func = <ref refid="n5010-test_8c_1ae1108fb5be774c3a02c79b22d9e4e8a4" kindref="member">fpga_test_esram</ref>,
	},
	{
		.name = &quot;qdr&quot;,
		.func = <ref refid="n5010-test_8c_1a7d4ba0af37d28b2281e697ff461b8cbb" kindref="member">fpga_test_qdr</ref>,
	}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="100" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="102" bodyend="-1"/>
        <referencedby refid="n5010-test_8c_1a443cc7c174314015bd7fe2613c4d8245" compoundref="n5010-test_8c" startline="713" endline="734">parse_mode</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="n5010-test_8c_1a66f9a1b5d37745c9587641613bf50cd5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_test_ddr_directed</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_test_ddr_directed</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="415" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="415" bodyend="474" declfile="samples/n5010-test/n5010-test.c" declline="96" declcolumn="20"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="n5010-test_8c_1a11fa2de5d944e400aca76489981f2bf5" compoundref="n5010-test_8c" startline="48">DDR_TEST_MODE0_CTRL</references>
        <references refid="n5010-test_8c_1aafd7639b4452467ade798bbbb6495328" compoundref="n5010-test_8c" startline="49">DDR_TEST_MODE0_STAT</references>
        <references refid="n5010-test_8c_1a2d826077756d3ecead9f30e5d6eada51" compoundref="n5010-test_8c" startline="274" endline="286">fpga_banks</references>
        <references refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" compoundref="n5010-test_8c" startline="258" endline="272">fpga_dump</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" compoundref="types__enum_8h" startline="61">FPGA_EXCEPTION</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="n5010-test_8c_1aef1214e09ce39997c1133269fd0936e9" compoundref="n5010-test_8c" startline="288" endline="310">fpga_start</references>
        <references refid="n5010-test_8c_1aad710973341f9f1301a817df6b1b8090" compoundref="n5010-test_8c" startline="312" endline="332">fpga_stop</references>
        <references refid="n5010-test_8c_1a2973f7fa537bc9d89cbda5fdf88682e6" compoundref="n5010-test_8c" startline="334" endline="363">fpga_wait</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1a4a327a70c05938aa6ecda3e2e9225663" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_test_ddr_prbs</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_test_ddr_prbs</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="365" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="365" bodyend="413" declfile="samples/n5010-test/n5010-test.c" declline="97" declcolumn="20"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="n5010-test_8c_1af2a7dd16fe742a0cab2a0b44054299f6" compoundref="n5010-test_8c" startline="53">DDR_TEST_MODE1_BANK_STAT</references>
        <references refid="n5010-test_8c_1aa797184b69f2027cb914153bef518e6f" compoundref="n5010-test_8c" startline="51">DDR_TEST_MODE1_CTRL</references>
        <references refid="n5010-test_8c_1a6ad2ae5dc714ef052ac3c0615ff9d52d" compoundref="n5010-test_8c" startline="52">DDR_TEST_MODE1_STAT</references>
        <references refid="n5010-test_8c_1a2d826077756d3ecead9f30e5d6eada51" compoundref="n5010-test_8c" startline="274" endline="286">fpga_banks</references>
        <references refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" compoundref="n5010-test_8c" startline="258" endline="272">fpga_dump</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" compoundref="types__enum_8h" startline="61">FPGA_EXCEPTION</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="n5010-test_8c_1aef1214e09ce39997c1133269fd0936e9" compoundref="n5010-test_8c" startline="288" endline="310">fpga_start</references>
        <references refid="n5010-test_8c_1aad710973341f9f1301a817df6b1b8090" compoundref="n5010-test_8c" startline="312" endline="332">fpga_stop</references>
        <references refid="n5010-test_8c_1a2973f7fa537bc9d89cbda5fdf88682e6" compoundref="n5010-test_8c" startline="334" endline="363">fpga_wait</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1ae92a916f3955b96edf4ef7ab5a667114" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_test_hbm</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_test_hbm</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="626" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="626" bodyend="690" declfile="samples/n5010-test/n5010-test.c" declline="98" declcolumn="20"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" compoundref="n5010-ctl_8c" startline="84">n5010::debug</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" compoundref="types__enum_8h" startline="61">FPGA_EXCEPTION</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="n5010-test_8c_1aef1214e09ce39997c1133269fd0936e9" compoundref="n5010-test_8c" startline="288" endline="310">fpga_start</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <references refid="n5010-test_8c_1a2bf1b6f3be700790eed5fda6e84fa81e" compoundref="n5010-test_8c" startline="58">HBM_TEST_CTRL</references>
        <references refid="n5010-test_8c_1a0cecb64eaade5d14e674207e514755b0" compoundref="n5010-test_8c" startline="56">HBM_TEST_FAIL</references>
        <references refid="n5010-test_8c_1af6d4323e2c3b5bb514a847b9f3fd535e" compoundref="n5010-test_8c" startline="55">HBM_TEST_PASS</references>
        <references refid="n5010-test_8c_1ad1c397afa5c85b9a28f073353ca9032c" compoundref="n5010-test_8c" startline="57">HBM_TEST_TIMEOUT</references>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1ae1108fb5be774c3a02c79b22d9e4e8a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_test_esram</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_test_esram</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="476" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="476" bodyend="549" declfile="samples/n5010-test/n5010-test.c" declline="99" declcolumn="20"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" compoundref="n5010-ctl_8c" startline="84">n5010::debug</references>
        <references refid="n5010-test_8c_1a2b060f9438390e34799ed496075b28f0" compoundref="n5010-test_8c" startline="69">ESRAM_FM</references>
        <references refid="n5010-test_8c_1aba15ac25260eb5c478e49ea9bbc93c8f" compoundref="n5010-test_8c" startline="74">ESRAM_TEST_CTRL</references>
        <references refid="n5010-test_8c_1aec1f8e4c78da3130142597eb059a5c5d" compoundref="n5010-test_8c" startline="71">ESRAM_TEST_FAIL</references>
        <references refid="n5010-test_8c_1ad2ef5ce635ab16f9c52bfb43c72ba959" compoundref="n5010-test_8c" startline="72">ESRAM_TEST_PASS</references>
        <references refid="n5010-test_8c_1a000ba0c3445077186d306cac29ab41e9" compoundref="n5010-test_8c" startline="68">ESRAM_TEST_STAT</references>
        <references refid="n5010-test_8c_1aaacce65608c404b4aedc54f5afc8cd6a" compoundref="n5010-test_8c" startline="70">ESRAM_TEST_TIMEOUT</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" compoundref="types__enum_8h" startline="61">FPGA_EXCEPTION</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="include_2opae_2mmio_8h_1a6df7f745d9b9d47582714fe8e2d1a761">fpgaWriteMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <references refid="n5010-test_8c_1a31e69e55e98d6aa055fb6a352bb0feef" compoundref="n5010-test_8c" startline="76">MAX_POLLS</references>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1a7d4ba0af37d28b2281e697ff461b8cbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_test_qdr</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_test_qdr</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="551" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="551" bodyend="624" declfile="samples/n5010-test/n5010-test.c" declline="100" declcolumn="20"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" compoundref="n5010-ctl_8c" startline="84">n5010::debug</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" compoundref="types__enum_8h" startline="61">FPGA_EXCEPTION</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="include_2opae_2mmio_8h_1a6df7f745d9b9d47582714fe8e2d1a761">fpgaWriteMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <references refid="n5010-test_8c_1a31e69e55e98d6aa055fb6a352bb0feef" compoundref="n5010-test_8c" startline="76">MAX_POLLS</references>
        <references refid="n5010-test_8c_1acd20fcd6bd92565b6e0c8667b24815ea" compoundref="n5010-test_8c" startline="61">QDR_FM</references>
        <references refid="n5010-test_8c_1a8dbe1ba9e62a18d9a588f473458978ce" compoundref="n5010-test_8c" startline="66">QDR_TEST_CTRL</references>
        <references refid="n5010-test_8c_1a59145ff07c3dfaf8ab18785b5e3efc9a" compoundref="n5010-test_8c" startline="63">QDR_TEST_FAIL</references>
        <references refid="n5010-test_8c_1a52603e510127491e9adcc19710c72ff8" compoundref="n5010-test_8c" startline="64">QDR_TEST_PASS</references>
        <references refid="n5010-test_8c_1aee1428f73247ddf1841483bbd9f3928c" compoundref="n5010-test_8c" startline="60">QDR_TEST_STAT</references>
        <references refid="n5010-test_8c_1a99cad47c77096e0eca94240aac7fc258" compoundref="n5010-test_8c" startline="62">QDR_TEST_TIMEOUT</references>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1a8b18501a62f680f0b60aeaf03b0feaaf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_open</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_open</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="125" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="125" bodyend="173"/>
        <references refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" compoundref="n5010-ctl_8c" startline="77">n5010::filter</references>
        <references refid="types__enum_8h_1a9b2ddb9e533441e79f19d45fa0a24934a5c3973a253ffaabddd0a083f05abebc7" compoundref="types__enum_8h" startline="114">FPGA_ACCELERATOR</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da7aee5958cf7f46e9d80c4ee50d42d86c" compoundref="types__enum_8h" startline="62">FPGA_NOT_FOUND</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="enum_8h_1a277ba17f2377895855545bd82c1f901d">fpgaEnumerate</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a2903267d37ea5c64522b0addce74da5f">fpgaMapMMIO</references>
        <references refid="access_8h_1addde6b2bafcd6632a2c0b595c6bc0ef3">fpgaOpen</references>
        <references refid="properties_8h_1a71ad1e59994b2c8b04ea036a64515117">fpgaPropertiesSetGUID</references>
        <references refid="properties_8h_1a3724caa06200e0d3f0b56611c379d75b">fpgaPropertiesSetObjectType</references>
        <references refid="access_8h_1aa4addba9b864dbc614a1680dfc29dc59">fpgaReset</references>
        <references refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" compoundref="n5010-ctl_8c" startline="80">n5010::guid</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <references refid="structn5010_1ad0222c8836fd4aeb7a6da6d56d3176d6" compoundref="n5010-test_8c" startline="93">n5010::open_mode</references>
        <references refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" compoundref="n5010-ctl_8c" startline="78">n5010::token</references>
        <referencedby refid="n5010-test_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-test_8c" startline="807" endline="836">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fpga_close</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_close</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="175" column="13" bodyfile="samples/n5010-test/n5010-test.c" bodystart="175" bodyend="200"/>
        <references refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" compoundref="n5010-ctl_8c" startline="77">n5010::filter</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="access_8h_1ac83789ebb65dc6b2adeae3d7e7fa3e79">fpgaClose</references>
        <references refid="properties_8h_1a6f83533f996cf6bd25274e0b7b9c3050">fpgaDestroyProperties</references>
        <references refid="enum_8h_1a150a7a8f46e0d6df12cc329ff7030e21">fpgaDestroyToken</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a8c8db22506e1fbfd16440c660bfee28f">fpgaUnmapMMIO</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <references refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" compoundref="n5010-ctl_8c" startline="78">n5010::token</references>
        <referencedby refid="n5010-test_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-test_8c" startline="807" endline="836">main</referencedby>
        <referencedby refid="n5010-test_8c_1ab750b2af83dc6cbb0aa2d9a9d1b25079" compoundref="n5010-test_8c" startline="736" endline="805">parse_args</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1a2e79fe0581ec5864faa636b5fe0e03a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_base</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_base</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="202" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="202" bodyend="256"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="n5010-test_8c_1a64d2514266ba20fce840e5648ef89199" compoundref="n5010-test_8c" startline="43">DFH_EOL</references>
        <references refid="n5010-test_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" compoundref="n5010-test_8c" startline="44">DFH_NEXT</references>
        <references refid="n5010-test_8c_1aca731dc493c4ea43958cb0435cdaa571" compoundref="n5010-test_8c" startline="45">DFH_TYPE</references>
        <references refid="n5010-test_8c_1a57df7e6b18c59c759284e4129b591829" compoundref="n5010-test_8c" startline="46">DFH_TYPE_AFU</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da7aee5958cf7f46e9d80c4ee50d42d86c" compoundref="types__enum_8h" startline="62">FPGA_NOT_FOUND</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" compoundref="n5010-ctl_8c" startline="80">n5010::guid</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <referencedby refid="n5010-test_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-test_8c" startline="807" endline="836">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fpga_dump</definition>
        <argsstring>(struct n5010 *n5010, uint64_t offset, size_t count)</argsstring>
        <name>fpga_dump</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="258" column="13" bodyfile="samples/n5010-test/n5010-test.c" bodystart="258" bodyend="272"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" compoundref="n5010-ctl_8c" startline="84">n5010::debug</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <referencedby refid="n5010-test_8c_1aef1214e09ce39997c1133269fd0936e9" compoundref="n5010-test_8c" startline="288" endline="310">fpga_start</referencedby>
        <referencedby refid="n5010-test_8c_1aad710973341f9f1301a817df6b1b8090" compoundref="n5010-test_8c" startline="312" endline="332">fpga_stop</referencedby>
        <referencedby refid="n5010-test_8c_1a66f9a1b5d37745c9587641613bf50cd5" compoundref="n5010-test_8c" startline="415" endline="474">fpga_test_ddr_directed</referencedby>
        <referencedby refid="n5010-test_8c_1a4a327a70c05938aa6ecda3e2e9225663" compoundref="n5010-test_8c" startline="365" endline="413">fpga_test_ddr_prbs</referencedby>
        <referencedby refid="n5010-test_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-test_8c" startline="807" endline="836">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1a2d826077756d3ecead9f30e5d6eada51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_banks</definition>
        <argsstring>(struct n5010 *n5010, uint64_t offset, uint64_t *num_banks)</argsstring>
        <name>fpga_banks</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>num_banks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="274" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="274" bodyend="286"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <referencedby refid="n5010-test_8c_1a66f9a1b5d37745c9587641613bf50cd5" compoundref="n5010-test_8c" startline="415" endline="474">fpga_test_ddr_directed</referencedby>
        <referencedby refid="n5010-test_8c_1a4a327a70c05938aa6ecda3e2e9225663" compoundref="n5010-test_8c" startline="365" endline="413">fpga_test_ddr_prbs</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1aef1214e09ce39997c1133269fd0936e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_start</definition>
        <argsstring>(struct n5010 *n5010, uint64_t offset, uint64_t num_banks)</argsstring>
        <name>fpga_start</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>num_banks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="288" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="288" bodyend="310"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" compoundref="n5010-test_8c" startline="258" endline="272">fpga_dump</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a6df7f745d9b9d47582714fe8e2d1a761">fpgaWriteMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <references refid="hello__afu_8c_1a300ec1c0f7befcbb990985d36d56d8c9">usleep</references>
        <referencedby refid="n5010-test_8c_1a66f9a1b5d37745c9587641613bf50cd5" compoundref="n5010-test_8c" startline="415" endline="474">fpga_test_ddr_directed</referencedby>
        <referencedby refid="n5010-test_8c_1a4a327a70c05938aa6ecda3e2e9225663" compoundref="n5010-test_8c" startline="365" endline="413">fpga_test_ddr_prbs</referencedby>
        <referencedby refid="n5010-test_8c_1ae92a916f3955b96edf4ef7ab5a667114" compoundref="n5010-test_8c" startline="626" endline="690">fpga_test_hbm</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1aad710973341f9f1301a817df6b1b8090" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_stop</definition>
        <argsstring>(struct n5010 *n5010, uint64_t offset)</argsstring>
        <name>fpga_stop</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="312" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="312" bodyend="332"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" compoundref="n5010-test_8c" startline="258" endline="272">fpga_dump</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a6df7f745d9b9d47582714fe8e2d1a761">fpgaWriteMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <references refid="hello__afu_8c_1a300ec1c0f7befcbb990985d36d56d8c9">usleep</references>
        <referencedby refid="n5010-test_8c_1a66f9a1b5d37745c9587641613bf50cd5" compoundref="n5010-test_8c" startline="415" endline="474">fpga_test_ddr_directed</referencedby>
        <referencedby refid="n5010-test_8c_1a4a327a70c05938aa6ecda3e2e9225663" compoundref="n5010-test_8c" startline="365" endline="413">fpga_test_ddr_prbs</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1a2973f7fa537bc9d89cbda5fdf88682e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_wait</definition>
        <argsstring>(struct n5010 *n5010, uint64_t offset, uint64_t init, uint64_t result)</argsstring>
        <name>fpga_wait</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>init</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="334" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="334" bodyend="363"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" compoundref="n5010-ctl_8c" startline="84">n5010::debug</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" compoundref="types__enum_8h" startline="61">FPGA_EXCEPTION</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <referencedby refid="n5010-test_8c_1a66f9a1b5d37745c9587641613bf50cd5" compoundref="n5010-test_8c" startline="415" endline="474">fpga_test_ddr_directed</referencedby>
        <referencedby refid="n5010-test_8c_1a4a327a70c05938aa6ecda3e2e9225663" compoundref="n5010-test_8c" startline="365" endline="413">fpga_test_ddr_prbs</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1a9bd4308d463193b0188339cb5495a58f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_usage</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>print_usage</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="692" column="13" bodyfile="samples/n5010-test/n5010-test.c" bodystart="692" bodyend="711"/>
        <referencedby refid="n5010-test_8c_1ab750b2af83dc6cbb0aa2d9a9d1b25079" compoundref="n5010-test_8c" startline="736" endline="805">parse_args</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1a443cc7c174314015bd7fe2613c4d8245" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool parse_mode</definition>
        <argsstring>(struct n5010 *n5010, const char *mode)</argsstring>
        <name>parse_mode</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="713" column="13" bodyfile="samples/n5010-test/n5010-test.c" bodystart="713" bodyend="734"/>
        <references refid="n5010-test_8c_1a0583be682de6cecd33c5d44955e5ee66" compoundref="n5010-test_8c" startline="102">n5010_test</references>
        <references refid="structn5010__test_1a5700b8f7e0f3b2bccfb8d4ad4328a1a5" compoundref="n5010-ctl_8c" startline="72">n5010_test::name</references>
        <references refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" compoundref="n5010-ctl_8c" startline="82">n5010::test</references>
        <referencedby refid="n5010-test_8c_1ab750b2af83dc6cbb0aa2d9a9d1b25079" compoundref="n5010-test_8c" startline="736" endline="805">parse_args</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1ab750b2af83dc6cbb0aa2d9a9d1b25079" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result parse_args</definition>
        <argsstring>(int argc, char **argv, struct n5010 *n5010)</argsstring>
        <name>parse_args</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="736" column="20" bodyfile="samples/n5010-test/n5010-test.c" bodystart="736" bodyend="805"/>
        <references refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" compoundref="n5010-ctl_8c" startline="84">n5010::debug</references>
        <references refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" compoundref="n5010-ctl_8c" startline="77">n5010::filter</references>
        <references refid="n5010-test_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" compoundref="n5010-test_8c" startline="175" endline="200">fpga_close</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" compoundref="types__enum_8h" startline="61">FPGA_EXCEPTION</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="types__enum_8h_1a3a32599a1213352a3217f6e068651fc6a7eb08309368b559a0ecaf8193053a94c" compoundref="types__enum_8h" startline="158">FPGA_OPEN_SHARED</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="properties_8h_1a010d3b6839fc8763e66e4f953682a489">fpgaGetProperties</references>
        <references refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" compoundref="n5010-ctl_8c" startline="80">n5010::guid</references>
        <references refid="structn5010_1ad0222c8836fd4aeb7a6da6d56d3176d6" compoundref="n5010-test_8c" startline="93">n5010::open_mode</references>
        <references refid="object__api_8c_1ab61f552ece35d302b110b6c2e154226f">options</references>
        <references refid="n5010-test_8c_1a443cc7c174314015bd7fe2613c4d8245" compoundref="n5010-test_8c" startline="713" endline="734">parse_mode</references>
        <references refid="n5010-test_8c_1a9bd4308d463193b0188339cb5495a58f" compoundref="n5010-test_8c" startline="692" endline="711">print_usage</references>
        <referencedby refid="n5010-test_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-test_8c" startline="807" endline="836">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-test_8c_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-test/n5010-test.c" line="807" column="5" bodyfile="samples/n5010-test/n5010-test.c" bodystart="807" bodyend="836"/>
        <references refid="n5010-test_8c_1a2e79fe0581ec5864faa636b5fe0e03a4" compoundref="n5010-test_8c" startline="202" endline="256">fpga_base</references>
        <references refid="n5010-test_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" compoundref="n5010-test_8c" startline="175" endline="200">fpga_close</references>
        <references refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" compoundref="n5010-test_8c" startline="258" endline="272">fpga_dump</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="n5010-test_8c_1a8b18501a62f680f0b60aeaf03b0feaaf" compoundref="n5010-test_8c" startline="125" endline="173">fpga_open</references>
        <references refid="structn5010__test_1a475cef5da0662cd3a96b1e0bcbdc67c8" compoundref="n5010-ctl_8c" startline="73">n5010_test::func</references>
        <references refid="n5010-test_8c_1ab750b2af83dc6cbb0aa2d9a9d1b25079" compoundref="n5010-test_8c" startline="736" endline="805">parse_args</references>
        <references refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" compoundref="n5010-ctl_8c" startline="82">n5010::test</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright(c)<sp/>2021-2022<sp/>,<sp/>Silicom<sp/>Denmark<sp/>A/S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/><sp/>and<sp/><sp/>use<sp/><sp/>in<sp/>source<sp/><sp/>and<sp/><sp/>binary<sp/><sp/>forms,<sp/><sp/>with<sp/><sp/>or<sp/><sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/><sp/>source<sp/>code<sp/><sp/>must<sp/>retain<sp/>the<sp/><sp/>above<sp/>copyright<sp/>notice,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/><sp/>of<sp/>Intel<sp/>Corporation<sp/><sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>may<sp/>be<sp/>used<sp/>to<sp/><sp/>endorse<sp/>or<sp/>promote<sp/><sp/>products<sp/>derived<sp/><sp/>from<sp/>this<sp/><sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/><sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/><sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIABLE<sp/><sp/>FOR<sp/><sp/>ANY<sp/><sp/>DIRECT,<sp/><sp/>INDIRECT,<sp/><sp/>INCIDENTAL,<sp/><sp/>SPECIAL,<sp/><sp/>EXEMPLARY,<sp/><sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/><sp/>DAMAGES<sp/><sp/>(INCLUDING,<sp/><sp/>BUT<sp/><sp/>NOT<sp/>LIMITED<sp/><sp/>TO,<sp/><sp/>PROCUREMENT<sp/><sp/>OF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/><sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/><sp/>OR<sp/>BUSINESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERRUPTION)<sp/><sp/>HOWEVER<sp/>CAUSED<sp/><sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/><sp/>OF<sp/>LIABILITY,<sp/><sp/>WHETHER<sp/>IN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONTRACT,<sp/><sp/>STRICT<sp/>LIABILITY,<sp/><sp/>OR<sp/>TORT<sp/><sp/>(INCLUDING<sp/>NEGLIGENCE<sp/><sp/>OR<sp/>OTHERWISE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/><sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile:<sp/>gcc<sp/>-DSTATIC=static<sp/>-D_GNU_SOURCE<sp/>-I<sp/>/usr/src/opae/argsfilter<sp/>/usr/src/opae/argsfilter/argsfilter.c<sp/>n5010-test.c<sp/>-o<sp/>n5010-test<sp/>-l<sp/>opae-c<sp/>-l<sp/>uuid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="error_8h" kindref="compound">error.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;getopt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fpga_8h" kindref="compound">opae/fpga.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uuid/uuid.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;endian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;argsfilter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="n5010-test_8c_1a64d2514266ba20fce840e5648ef89199" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFH_EOL(h)<sp/><sp/><sp/><sp/>((h<sp/>&gt;&gt;<sp/>40)<sp/>&amp;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="n5010-test_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFH_NEXT(h)<sp/><sp/><sp/>((h<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xffffff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="n5010-test_8c_1aca731dc493c4ea43958cb0435cdaa571" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFH_TYPE(h)<sp/><sp/><sp/>((h<sp/>&gt;&gt;<sp/>60)<sp/>&amp;<sp/>0xf)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="n5010-test_8c_1a57df7e6b18c59c759284e4129b591829" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFH_TYPE_AFU<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="n5010-test_8c_1a11fa2de5d944e400aca76489981f2bf5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DDR_TEST_MODE0_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="n5010-test_8c_1aafd7639b4452467ade798bbbb6495328" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DDR_TEST_MODE0_STAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="n5010-test_8c_1aa797184b69f2027cb914153bef518e6f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DDR_TEST_MODE1_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="n5010-test_8c_1a6ad2ae5dc714ef052ac3c0615ff9d52d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DDR_TEST_MODE1_STAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="n5010-test_8c_1af2a7dd16fe742a0cab2a0b44054299f6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DDR_TEST_MODE1_BANK_STAT(x)<sp/>(0x3010<sp/>+<sp/>8<sp/>*<sp/>x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="n5010-test_8c_1af6d4323e2c3b5bb514a847b9f3fd535e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HBM_TEST_PASS<sp/><sp/><sp/><sp/><sp/>0x4000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="n5010-test_8c_1a0cecb64eaade5d14e674207e514755b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HBM_TEST_FAIL<sp/><sp/><sp/><sp/><sp/>0x4008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="n5010-test_8c_1ad1c397afa5c85b9a28f073353ca9032c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HBM_TEST_TIMEOUT<sp/><sp/>0x4010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="n5010-test_8c_1a2bf1b6f3be700790eed5fda6e84fa81e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HBM_TEST_CTRL<sp/><sp/><sp/><sp/><sp/>0x4018</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="n5010-test_8c_1aee1428f73247ddf1841483bbd9f3928c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>QDR_TEST_STAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x5000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="n5010-test_8c_1acd20fcd6bd92565b6e0c8667b24815ea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>QDR_FM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="n5010-test_8c_1a99cad47c77096e0eca94240aac7fc258" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>QDR_TEST_TIMEOUT(h)<sp/>((h<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>QDR_FM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="n5010-test_8c_1a59145ff07c3dfaf8ab18785b5e3efc9a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>QDR_TEST_FAIL(h)<sp/><sp/><sp/><sp/>((h<sp/>&gt;&gt;<sp/><sp/>8)<sp/>&amp;<sp/>QDR_FM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="n5010-test_8c_1a52603e510127491e9adcc19710c72ff8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>QDR_TEST_PASS(h)<sp/><sp/><sp/><sp/>((h<sp/>&gt;&gt;<sp/><sp/>0)<sp/>&amp;<sp/>QDR_FM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="n5010-test_8c_1a8dbe1ba9e62a18d9a588f473458978ce" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>QDR_TEST_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x5008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="n5010-test_8c_1a000ba0c3445077186d306cac29ab41e9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESRAM_TEST_STAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x6000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="n5010-test_8c_1a2b060f9438390e34799ed496075b28f0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESRAM_FM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xffff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="n5010-test_8c_1aaacce65608c404b4aedc54f5afc8cd6a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESRAM_TEST_TIMEOUT(h)<sp/>((h<sp/>&gt;&gt;<sp/>32)<sp/>&amp;<sp/>ESRAM_FM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="n5010-test_8c_1aec1f8e4c78da3130142597eb059a5c5d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESRAM_TEST_FAIL(h)<sp/><sp/><sp/><sp/>((h<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>ESRAM_FM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="n5010-test_8c_1ad2ef5ce635ab16f9c52bfb43c72ba959" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESRAM_TEST_PASS(h)<sp/><sp/><sp/><sp/>((h<sp/>&gt;&gt;<sp/><sp/>0)<sp/>&amp;<sp/>ESRAM_FM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="n5010-test_8c_1aba15ac25260eb5c478e49ea9bbc93c8f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESRAM_TEST_CTRL<sp/><sp/><sp/><sp/>0x6008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="n5010-test_8c_1a31e69e55e98d6aa055fb6a352bb0feef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_POLLS<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010" kindref="compound">n5010</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010__test" kindref="compound">n5010_test</ref><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structn5010__test_1a5700b8f7e0f3b2bccfb8d4ad4328a1a5" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>(*<ref refid="structn5010__test_1a475cef5da0662cd3a96b1e0bcbdc67c8" kindref="member">func</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010" kindref="compound">n5010</ref><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><ref refid="types_8h_1a252f538a10fb51d0988ed52946516d9e" kindref="member">fpga_token</ref><sp/><ref refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" kindref="member">token</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><ref refid="types_8h_1a4ad40f31195233b629bcde187b0556d5" kindref="member">fpga_handle</ref><sp/><ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><ref refid="types_8h_1af0b6683499be79fab39ac41db02e7abf" kindref="member">fpga_guid</ref><sp/><ref refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" kindref="member">guid</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><ref refid="types_8h_1ab868bdeab946a8059abe7e9c114aee56" kindref="member">fpga_properties</ref><sp/><ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/><ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010__test" kindref="compound">n5010_test</ref><sp/>*<ref refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" kindref="member">test</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" kindref="member">debug</ref>;</highlight></codeline>
<codeline lineno="93" refid="structn5010_1ad0222c8836fd4aeb7a6da6d56d3176d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint<sp/><ref refid="structn5010_1ad0222c8836fd4aeb7a6da6d56d3176d6" kindref="member">open_mode</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1a66f9a1b5d37745c9587641613bf50cd5" kindref="member">fpga_test_ddr_directed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1a4a327a70c05938aa6ecda3e2e9225663" kindref="member">fpga_test_ddr_prbs</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1ae92a916f3955b96edf4ef7ab5a667114" kindref="member">fpga_test_hbm</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1ae1108fb5be774c3a02c79b22d9e4e8a4" kindref="member">fpga_test_esram</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="100" refid="n5010-test_8c_1a0583be682de6cecd33c5d44955e5ee66" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1a7d4ba0af37d28b2281e697ff461b8cbb" kindref="member">fpga_test_qdr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010__test" kindref="compound">n5010_test</ref><sp/><ref refid="structn5010__test" kindref="compound">n5010_test</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structn5010__test_1a5700b8f7e0f3b2bccfb8d4ad4328a1a5" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hbm&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.func<sp/>=<sp/><ref refid="n5010-test_8c_1ae92a916f3955b96edf4ef7ab5a667114" kindref="member">fpga_test_hbm</ref>,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ddr-directed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.func<sp/>=<sp/><ref refid="n5010-test_8c_1a66f9a1b5d37745c9587641613bf50cd5" kindref="member">fpga_test_ddr_directed</ref>,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ddr-prbs&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.func<sp/>=<sp/><ref refid="n5010-test_8c_1a4a327a70c05938aa6ecda3e2e9225663" kindref="member">fpga_test_ddr_prbs</ref>,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;esram&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.func<sp/>=<sp/><ref refid="n5010-test_8c_1ae1108fb5be774c3a02c79b22d9e4e8a4" kindref="member">fpga_test_esram</ref>,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;qdr&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.func<sp/>=<sp/><ref refid="n5010-test_8c_1a7d4ba0af37d28b2281e697ff461b8cbb" kindref="member">fpga_test_qdr</ref>,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="n5010-test_8c_1a8b18501a62f680f0b60aeaf03b0feaaf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1a8b18501a62f680f0b60aeaf03b0feaaf" kindref="member">fpga_open</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="properties_8h_1a3724caa06200e0d3f0b56611c379d75b" kindref="member">fpgaPropertiesSetObjectType</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>,<sp/><ref refid="types__enum_8h_1a9b2ddb9e533441e79f19d45fa0a24934a5c3973a253ffaabddd0a083f05abebc7" kindref="member">FPGA_ACCELERATOR</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>set<sp/>object<sp/>type:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="properties_8h_1a71ad1e59994b2c8b04ea036a64515117" kindref="member">fpgaPropertiesSetGUID</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" kindref="member">guid</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>set<sp/>guid:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="enum_8h_1a277ba17f2377895855545bd82c1f901d" kindref="member">fpgaEnumerate</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>,<sp/>1,<sp/>&amp;<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" kindref="member">token</ref>,<sp/>1,<sp/>&amp;num);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>enumerate<sp/>fpga:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da7aee5958cf7f46e9d80c4ee50d42d86c" kindref="member">FPGA_NOT_FOUND</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>find<sp/>fpga<sp/>with<sp/>guid:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="access_8h_1addde6b2bafcd6632a2c0b595c6bc0ef3" kindref="member">fpgaOpen</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" kindref="member">token</ref>,<sp/>&amp;<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ad0222c8836fd4aeb7a6da6d56d3176d6" kindref="member">open_mode</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>open<sp/>fpga:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a2903267d37ea5c64522b0addce74da5f" kindref="member">fpgaMapMMIO</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>map<sp/>io<sp/>memory:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="access_8h_1aa4addba9b864dbc614a1680dfc29dc59" kindref="member">fpgaReset</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>reset<sp/>fpga:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="n5010-test_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n5010-test_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" kindref="member">fpga_close</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="properties_8h_1a6f83533f996cf6bd25274e0b7b9c3050" kindref="member">fpgaDestroyProperties</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>destroy<sp/>device<sp/>filter:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a8c8db22506e1fbfd16440c660bfee28f" kindref="member">fpgaUnmapMMIO</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>unmap<sp/>io<sp/>memory:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="access_8h_1ac83789ebb65dc6b2adeae3d7e7fa3e79" kindref="member">fpgaClose</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>close<sp/>fpga:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" kindref="member">token</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="enum_8h_1a150a7a8f46e0d6df12cc329ff7030e21" kindref="member">fpgaDestroyToken</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" kindref="member">token</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>destroy<sp/>token:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="n5010-test_8c_1a2e79fe0581ec5864faa636b5fe0e03a4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1a2e79fe0581ec5864faa636b5fe0e03a4" kindref="member">fpga_base</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>header;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uuid_t<sp/>u128;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>u64[2];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>uuid;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref>,<sp/>&amp;header);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>dfh:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>8,<sp/>&amp;uuid.u64[1]);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>uuid<sp/>high:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>16,<sp/>&amp;uuid.u64[0]);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>uuid<sp/>low:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uuid.u64[i]<sp/>=<sp/>be64toh(uuid.u64[i]);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n5010-test_8c_1aca731dc493c4ea43958cb0435cdaa571" kindref="member">DFH_TYPE</ref>(header)<sp/>==<sp/><ref refid="n5010-test_8c_1a57df7e6b18c59c759284e4129b591829" kindref="member">DFH_TYPE_AFU</ref><sp/>&amp;&amp;<sp/>uuid_compare(uuid.u128,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" kindref="member">guid</ref>)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n5010-test_8c_1a64d2514266ba20fce840e5648ef89199" kindref="member">DFH_EOL</ref>(header))<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>matching<sp/>dfh<sp/>found:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>header);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da7aee5958cf7f46e9d80c4ee50d42d86c" kindref="member">FPGA_NOT_FOUND</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n5010-test_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" kindref="member">DFH_NEXT</ref>(header)<sp/>==<sp/>0<sp/>||<sp/><ref refid="n5010-test_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" kindref="member">DFH_NEXT</ref>(header)<sp/>==<sp/>0xffff)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;next<sp/>dfh<sp/>not<sp/>found:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>header);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da7aee5958cf7f46e9d80c4ee50d42d86c" kindref="member">FPGA_NOT_FOUND</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+=<sp/><ref refid="n5010-test_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" kindref="member">DFH_NEXT</ref>(header);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" kindref="member">fpga_dump</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>uint64_t<sp/>offset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>base<sp/>=<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" kindref="member">debug</ref>)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>reg<sp/>=<sp/>base<sp/>+<sp/>i<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>val;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/>reg,<sp/>&amp;val);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;reg:<sp/>0x%04jx,<sp/>val:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>reg,<sp/>val);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="n5010-test_8c_1a2d826077756d3ecead9f30e5d6eada51" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1a2d826077756d3ecead9f30e5d6eada51" kindref="member">fpga_banks</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>uint64_t<sp/>offset,<sp/>uint64_t<sp/>*num_banks)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>offset,<sp/>num_banks);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>num_banks:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="n5010-test_8c_1aef1214e09ce39997c1133269fd0936e9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1aef1214e09ce39997c1133269fd0936e9" kindref="member">fpga_start</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>uint64_t<sp/>offset,<sp/>uint64_t<sp/>num_banks)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>ctrl;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/>ctrl<sp/>=<sp/>((uint64_t)1<sp/>&lt;&lt;<sp/>num_banks)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;starting<sp/>PRBS<sp/>generators\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" kindref="member">fpga_dump</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>offset,<sp/>1);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a6df7f745d9b9d47582714fe8e2d1a761" kindref="member">fpgaWriteMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>offset,<sp/>ctrl);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>start<sp/>PRBS<sp/>generators:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><ref refid="hello__afu_8c_1a300ec1c0f7befcbb990985d36d56d8c9" kindref="member">usleep</ref>(1000000);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" kindref="member">fpga_dump</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>offset,<sp/>1);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="n5010-test_8c_1aad710973341f9f1301a817df6b1b8090" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1aad710973341f9f1301a817df6b1b8090" kindref="member">fpga_stop</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>uint64_t<sp/>offset)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>ctrl<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;stopping<sp/>DDR<sp/>test<sp/>generators\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" kindref="member">fpga_dump</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>offset,<sp/>1);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a6df7f745d9b9d47582714fe8e2d1a761" kindref="member">fpgaWriteMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>offset,<sp/>ctrl);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>stop<sp/>DDR<sp/>test<sp/>generators:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><ref refid="hello__afu_8c_1a300ec1c0f7befcbb990985d36d56d8c9" kindref="member">usleep</ref>(1000000);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" kindref="member">fpga_dump</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>offset,<sp/>1);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="n5010-test_8c_1a2973f7fa537bc9d89cbda5fdf88682e6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1a2973f7fa537bc9d89cbda5fdf88682e6" kindref="member">fpga_wait</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>uint64_t<sp/>offset,<sp/>uint64_t<sp/>init,<sp/>uint64_t<sp/>result)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>ts<sp/>=<sp/>{.tv_sec<sp/>=<sp/>0,<sp/>.tv_nsec<sp/>=<sp/>100000000};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>status<sp/>=<sp/>init;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;waiting<sp/>for<sp/>test<sp/>to<sp/>complete...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>init)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nanosleep(&amp;ts,<sp/>NULL);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>offset,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>status:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" kindref="member">debug</ref>)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;reg:<sp/>0x%04jx<sp/>(DDR<sp/>status),<sp/>val:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>offset,<sp/>status);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>with<sp/>unexpected<sp/>result:<sp/>expected:<sp/>0x%016jx,<sp/>got:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>result,<sp/>status);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="n5010-test_8c_1a4a327a70c05938aa6ecda3e2e9225663" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1a4a327a70c05938aa6ecda3e2e9225663" kindref="member">fpga_test_ddr_prbs</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>num_banks,<sp/>stat,<sp/>i;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;starting<sp/>DDR<sp/>PRBS<sp/>read/write<sp/>test\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" kindref="member">fpga_dump</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/><ref refid="n5010-test_8c_1aa797184b69f2027cb914153bef518e6f" kindref="member">DDR_TEST_MODE1_CTRL</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>number<sp/>of<sp/>num_banks<sp/>from<sp/>stat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1a2d826077756d3ecead9f30e5d6eada51" kindref="member">fpga_banks</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/><ref refid="n5010-test_8c_1a6ad2ae5dc714ef052ac3c0615ff9d52d" kindref="member">DDR_TEST_MODE1_STAT</ref>,<sp/>&amp;num_banks);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>PRBS<sp/>start<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1aad710973341f9f1301a817df6b1b8090" kindref="member">fpga_stop</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/><ref refid="n5010-test_8c_1aa797184b69f2027cb914153bef518e6f" kindref="member">DDR_TEST_MODE1_CTRL</ref>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expect<sp/>DDR_TEST_MODE1_BANK_STAT(bank)<sp/>to<sp/>return<sp/>0<sp/>while<sp/>PRBS<sp/>not<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_banks;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1af2a7dd16fe742a0cab2a0b44054299f6" kindref="member">DDR_TEST_MODE1_BANK_STAT</ref>(i),<sp/>&amp;stat);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>DDR_TEST_MODE1_BANK_STAT(%ju):<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat<sp/>!=<sp/>0x0)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>PRBS<sp/>stat<sp/>non-zero<sp/>while<sp/>generator<sp/>idle:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>stat);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>PRBS<sp/>start<sp/>bits<sp/>for<sp/>each<sp/>bank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1aef1214e09ce39997c1133269fd0936e9" kindref="member">fpga_start</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/><ref refid="n5010-test_8c_1aa797184b69f2027cb914153bef518e6f" kindref="member">DDR_TEST_MODE1_CTRL</ref>,<sp/>num_banks);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>PRBS<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_banks;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1a2973f7fa537bc9d89cbda5fdf88682e6" kindref="member">fpga_wait</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/><ref refid="n5010-test_8c_1af2a7dd16fe742a0cab2a0b44054299f6" kindref="member">DDR_TEST_MODE1_BANK_STAT</ref>(i),<sp/>0,<sp/>0x39);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="n5010-test_8c_1a66f9a1b5d37745c9587641613bf50cd5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1a66f9a1b5d37745c9587641613bf50cd5" kindref="member">fpga_test_ddr_directed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>num_banks,<sp/>stat;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;starting<sp/>DDR<sp/>directed<sp/>read/write<sp/>test\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" kindref="member">fpga_dump</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/><ref refid="n5010-test_8c_1a11fa2de5d944e400aca76489981f2bf5" kindref="member">DDR_TEST_MODE0_CTRL</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>number<sp/>of<sp/>num_banks<sp/>from<sp/>stat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1a2d826077756d3ecead9f30e5d6eada51" kindref="member">fpga_banks</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/><ref refid="n5010-test_8c_1aafd7639b4452467ade798bbbb6495328" kindref="member">DDR_TEST_MODE0_STAT</ref>,<sp/>&amp;num_banks);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>test<sp/>generator<sp/>start<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1aad710973341f9f1301a817df6b1b8090" kindref="member">fpga_stop</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/><ref refid="n5010-test_8c_1a11fa2de5d944e400aca76489981f2bf5" kindref="member">DDR_TEST_MODE0_CTRL</ref>);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expect<sp/>error<sp/>status<sp/>to<sp/>return<sp/>0<sp/>while<sp/>test<sp/>generator<sp/>is<sp/>not<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1aafd7639b4452467ade798bbbb6495328" kindref="member">DDR_TEST_MODE0_STAT</ref>,<sp/>&amp;stat);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>failed<sp/>to<sp/>read<sp/>DDR_TEST_MODE0_STAT:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>test<sp/>error<sp/>bits<sp/>[23:16]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((stat<sp/>&amp;<sp/>0xFF0000)<sp/>!=<sp/>0x0)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>test<sp/>generator<sp/>error<sp/>status<sp/>non-zero<sp/>while<sp/>generator<sp/>idle:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>stat);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>start<sp/>bits<sp/>for<sp/>each<sp/>bank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1aef1214e09ce39997c1133269fd0936e9" kindref="member">fpga_start</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/><ref refid="n5010-test_8c_1a11fa2de5d944e400aca76489981f2bf5" kindref="member">DDR_TEST_MODE0_CTRL</ref>,<sp/>num_banks);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>test<sp/>generator<sp/>pass<sp/>bits<sp/>to<sp/>indicate<sp/>done<sp/>for<sp/>all<sp/>banks:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DDR_TEST_MODE0_STAT[23:16]<sp/>:<sp/>test<sp/>error<sp/>=<sp/>0x0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DDR_TEST_MODE0_STAT[15:8]<sp/><sp/>:<sp/>test<sp/>done<sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>num_banks)-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DDR_TEST_MODE0_STAT[7:0]<sp/><sp/><sp/>:<sp/>#<sp/>banks<sp/><sp/><sp/><sp/>=<sp/>num_banks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1a2973f7fa537bc9d89cbda5fdf88682e6" kindref="member">fpga_wait</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/><ref refid="n5010-test_8c_1aafd7639b4452467ade798bbbb6495328" kindref="member">DDR_TEST_MODE0_STAT</ref>,<sp/>num_banks,<sp/>(((1<sp/>&lt;&lt;<sp/>num_banks)-1)<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>num_banks);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>reported<sp/>errors<sp/>(DDR_TEST_MODE0_STAT[23:16])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1aafd7639b4452467ade798bbbb6495328" kindref="member">DDR_TEST_MODE0_STAT</ref>,<sp/>&amp;stat);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>failed<sp/>to<sp/>read<sp/>DDR_TEST_MODE0_STAT:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((stat<sp/>&amp;<sp/>0xFF0000)<sp/>!=<sp/>0x0)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>failed<sp/>with<sp/>the<sp/>following<sp/>status:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>stat);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="n5010-test_8c_1ae1108fb5be774c3a02c79b22d9e4e8a4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1ae1108fb5be774c3a02c79b22d9e4e8a4" kindref="member">fpga_test_esram</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>ts<sp/>=<sp/>{.tv_sec<sp/>=<sp/>0,<sp/>.tv_nsec<sp/>=<sp/>100000000};</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>stat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/>uint16_t<sp/>pass<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/>uint16_t<sp/>fail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/>uint16_t<sp/>timeout<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res<sp/>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>polls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;starting<sp/>eSRAM<sp/>read/write<sp/>test\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1a000ba0c3445077186d306cac29ab41e9" kindref="member">ESRAM_TEST_STAT</ref>,<sp/>&amp;stat);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref><sp/>||<sp/>stat<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;FPGA<sp/>not<sp/>ready<sp/>for<sp/>test,<sp/>status:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>stat);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a6df7f745d9b9d47582714fe8e2d1a761" kindref="member">fpgaWriteMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1aba15ac25260eb5c478e49ea9bbc93c8f" kindref="member">ESRAM_TEST_CTRL</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>start<sp/>test:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;waiting<sp/>for<sp/>test<sp/>to<sp/>complete...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++polls;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1a000ba0c3445077186d306cac29ab41e9" kindref="member">ESRAM_TEST_STAT</ref>,<sp/>&amp;stat);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>stat:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pass<sp/><sp/>=<sp/><ref refid="n5010-test_8c_1ad2ef5ce635ab16f9c52bfb43c72ba959" kindref="member">ESRAM_TEST_PASS</ref>(stat);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fail<sp/><sp/>=<sp/><ref refid="n5010-test_8c_1aec1f8e4c78da3130142597eb059a5c5d" kindref="member">ESRAM_TEST_FAIL</ref>(stat);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeout<sp/>=<sp/><ref refid="n5010-test_8c_1aaacce65608c404b4aedc54f5afc8cd6a" kindref="member">ESRAM_TEST_TIMEOUT</ref>(stat);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" kindref="member">debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;pass<sp/>(16x<sp/>eSRAM<sp/>channels)<sp/><sp/><sp/>:<sp/>0x%04x\n&quot;</highlight><highlight class="normal">,<sp/>pass);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;fail<sp/>(16x<sp/>eSRAM<sp/>channels)<sp/><sp/><sp/>:<sp/>0x%04x\n&quot;</highlight><highlight class="normal">,<sp/>fail);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;timeout<sp/>(16x<sp/>eSRAM<sp/>channels):<sp/>0x%04x\n&quot;</highlight><highlight class="normal">,<sp/>timeout);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nanosleep(&amp;ts,<sp/>NULL);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((pass<sp/>|<sp/>fail<sp/>|<sp/>timeout)<sp/>!=<sp/><ref refid="n5010-test_8c_1a2b060f9438390e34799ed496075b28f0" kindref="member">ESRAM_FM</ref>)<sp/>&amp;&amp;<sp/>polls<sp/>&lt;<sp/><ref refid="n5010-test_8c_1a31e69e55e98d6aa055fb6a352bb0feef" kindref="member">MAX_POLLS</ref>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(polls<sp/>==<sp/><ref refid="n5010-test_8c_1a31e69e55e98d6aa055fb6a352bb0feef" kindref="member">MAX_POLLS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>failed<sp/>FPGA<sp/>not<sp/>returning<sp/>result<sp/>within<sp/>time\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fail<sp/>!=<sp/>0x0)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>failed<sp/>on<sp/>the<sp/>following<sp/>channels:<sp/>0x%04x\n&quot;</highlight><highlight class="normal">,<sp/>fail);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout<sp/>!=<sp/>0x0)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>timed<sp/>out<sp/>on<sp/>the<sp/>following<sp/>channels:<sp/>0x%04x\n&quot;</highlight><highlight class="normal">,<sp/>timeout);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass<sp/>!=<sp/><ref refid="n5010-test_8c_1a2b060f9438390e34799ed496075b28f0" kindref="member">ESRAM_FM</ref>)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>did<sp/>not<sp/>pass<sp/>on<sp/>all<sp/>channels:<sp/>0x%04x\n&quot;</highlight><highlight class="normal">,<sp/>pass);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="n5010-test_8c_1a7d4ba0af37d28b2281e697ff461b8cbb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1a7d4ba0af37d28b2281e697ff461b8cbb" kindref="member">fpga_test_qdr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>ts<sp/>=<sp/>{.tv_sec<sp/>=<sp/>0,<sp/>.tv_nsec<sp/>=<sp/>100000000};</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>stat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/><sp/>pass<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/><sp/>fail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/>timeout<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>polls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;starting<sp/>QDR<sp/>read/write<sp/>test\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1aee1428f73247ddf1841483bbd9f3928c" kindref="member">QDR_TEST_STAT</ref>,<sp/>&amp;stat);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref><sp/>||<sp/>stat<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;FPGA<sp/>not<sp/>ready<sp/>for<sp/>test,<sp/>status:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>stat);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a6df7f745d9b9d47582714fe8e2d1a761" kindref="member">fpgaWriteMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1a8dbe1ba9e62a18d9a588f473458978ce" kindref="member">QDR_TEST_CTRL</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>start<sp/>test:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;waiting<sp/>for<sp/>test<sp/>to<sp/>complete...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++polls;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1aee1428f73247ddf1841483bbd9f3928c" kindref="member">QDR_TEST_STAT</ref>,<sp/>&amp;stat);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>stat:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pass<sp/><sp/>=<sp/><ref refid="n5010-test_8c_1a52603e510127491e9adcc19710c72ff8" kindref="member">QDR_TEST_PASS</ref>(stat);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fail<sp/><sp/>=<sp/><ref refid="n5010-test_8c_1a59145ff07c3dfaf8ab18785b5e3efc9a" kindref="member">QDR_TEST_FAIL</ref>(stat);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeout<sp/>=<sp/><ref refid="n5010-test_8c_1a99cad47c77096e0eca94240aac7fc258" kindref="member">QDR_TEST_TIMEOUT</ref>(stat);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" kindref="member">debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;pass<sp/>(8x<sp/>QDR<sp/>channels)<sp/><sp/><sp/>:<sp/>0x%02x\n&quot;</highlight><highlight class="normal">,<sp/>pass);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;fail<sp/>(8x<sp/>QDR<sp/>channels)<sp/><sp/><sp/>:<sp/>0x%02x\n&quot;</highlight><highlight class="normal">,<sp/>fail);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;timeout<sp/>(8x<sp/>QDR<sp/>channels):<sp/>0x%02x\n&quot;</highlight><highlight class="normal">,<sp/>timeout);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nanosleep(&amp;ts,<sp/>NULL);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((pass<sp/>|<sp/>fail<sp/>|<sp/>timeout)<sp/>!=<sp/><ref refid="n5010-test_8c_1acd20fcd6bd92565b6e0c8667b24815ea" kindref="member">QDR_FM</ref>)<sp/>&amp;&amp;<sp/>polls<sp/>&lt;<sp/><ref refid="n5010-test_8c_1a31e69e55e98d6aa055fb6a352bb0feef" kindref="member">MAX_POLLS</ref>);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(polls<sp/>==<sp/><ref refid="n5010-test_8c_1a31e69e55e98d6aa055fb6a352bb0feef" kindref="member">MAX_POLLS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>failed<sp/>FPGA<sp/>not<sp/>returning<sp/>result<sp/>within<sp/>time\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fail<sp/>!=<sp/>0x0)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>failed<sp/>on<sp/>the<sp/>following<sp/>channels:<sp/>0x%02x\n&quot;</highlight><highlight class="normal">,<sp/>fail);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout<sp/>!=<sp/>0x0)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>timed<sp/>out<sp/>on<sp/>the<sp/>following<sp/>channels:<sp/>0x%02x\n&quot;</highlight><highlight class="normal">,<sp/>timeout);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass<sp/>!=<sp/><ref refid="n5010-test_8c_1acd20fcd6bd92565b6e0c8667b24815ea" kindref="member">QDR_FM</ref>)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>did<sp/>not<sp/>pass<sp/>on<sp/>all<sp/>channels:<sp/>0x%02x\n&quot;</highlight><highlight class="normal">,<sp/>pass);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="n5010-test_8c_1ae92a916f3955b96edf4ef7ab5a667114" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1ae92a916f3955b96edf4ef7ab5a667114" kindref="member">fpga_test_hbm</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>ts<sp/>=<sp/>{.tv_sec<sp/>=<sp/>0,<sp/>.tv_nsec<sp/>=<sp/>100000000};</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>pass<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>fail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>timeout<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;starting<sp/>HBM<sp/>read/write<sp/>test\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1aef1214e09ce39997c1133269fd0936e9" kindref="member">fpga_start</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/><ref refid="n5010-test_8c_1a2bf1b6f3be700790eed5fda6e84fa81e" kindref="member">HBM_TEST_CTRL</ref>,<sp/>32);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;waiting<sp/>for<sp/>test<sp/>to<sp/>complete...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pass<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>fail<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>timeout<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nanosleep(&amp;ts,<sp/>NULL);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1af6d4323e2c3b5bb514a847b9f3fd535e" kindref="member">HBM_TEST_PASS</ref>,<sp/>&amp;pass);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>pass:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1a0cecb64eaade5d14e674207e514755b0" kindref="member">HBM_TEST_FAIL</ref>,<sp/>&amp;fail);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>fail:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/><ref refid="n5010-test_8c_1ad1c397afa5c85b9a28f073353ca9032c" kindref="member">HBM_TEST_TIMEOUT</ref>,<sp/>&amp;timeout);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>timeout:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" kindref="member">debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;reg:<sp/>0x%04x<sp/>(32x<sp/>HBM<sp/>channels,<sp/>pass),<sp/><sp/><sp/><sp/>val:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="n5010-test_8c_1af6d4323e2c3b5bb514a847b9f3fd535e" kindref="member">HBM_TEST_PASS</ref>,<sp/>pass);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;reg:<sp/>0x%04x<sp/>(32x<sp/>HBM<sp/>channels,<sp/>fail),<sp/><sp/><sp/><sp/>val:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="n5010-test_8c_1a0cecb64eaade5d14e674207e514755b0" kindref="member">HBM_TEST_FAIL</ref>,<sp/>fail);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;reg:<sp/>0x%04x<sp/>(32x<sp/>HBM<sp/>channels,<sp/>timeout),<sp/>val:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="n5010-test_8c_1ad1c397afa5c85b9a28f073353ca9032c" kindref="member">HBM_TEST_TIMEOUT</ref>,<sp/>timeout);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fail<sp/>!=<sp/>0x0)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>failed<sp/>on<sp/>the<sp/>following<sp/>channels:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>fail);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout<sp/>!=<sp/>0x0)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>timed<sp/>out<sp/>on<sp/>the<sp/>following<sp/>channels:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>timeout);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass<sp/>!=<sp/>0xffffffff)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Test<sp/>did<sp/>not<sp/>pass<sp/>on<sp/>all<sp/>channels:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>pass);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="n5010-test_8c_1a9bd4308d463193b0188339cb5495a58f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n5010-test_8c_1a9bd4308d463193b0188339cb5495a58f" kindref="member">print_usage</ref>(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/>fprintf(f,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;usage:<sp/>%s<sp/>[&lt;options&gt;]\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;options:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>[-S<sp/>&lt;segment&gt;]<sp/>[-B<sp/>&lt;bus&gt;]<sp/>[-D<sp/>&lt;device&gt;]<sp/>[-F<sp/>&lt;function&gt;]\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-S,<sp/>--segment<sp/><sp/><sp/>pci<sp/>segment<sp/>to<sp/>look<sp/>up<sp/>device<sp/>from\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-B,<sp/>--bus<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pci<sp/>bus<sp/>to<sp/>look<sp/>up<sp/>device<sp/>from\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-D,<sp/>--device<sp/><sp/><sp/><sp/>pci<sp/>device<sp/>number<sp/>to<sp/>look<sp/>up\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-F<sp/><sp/>--function<sp/><sp/>pci<sp/>function<sp/>to<sp/>look<sp/>up\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-h<sp/><sp/>--help<sp/><sp/><sp/><sp/><sp/><sp/>print<sp/>this<sp/>help\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-g<sp/><sp/>--guid<sp/><sp/><sp/><sp/><sp/><sp/>uuid<sp/>of<sp/>accelerator<sp/>to<sp/>open\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-m<sp/><sp/>--mode<sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>mode<sp/>to<sp/>execute.<sp/>Known<sp/>modes:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ddr-directed,<sp/>ddr-prbs,<sp/>hbm,<sp/>esram,<sp/>qdr\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-d<sp/><sp/>--debug<sp/><sp/><sp/><sp/><sp/>enable<sp/>debug<sp/>print<sp/>of<sp/>register<sp/>values\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-s<sp/><sp/>--shared<sp/><sp/><sp/><sp/>open<sp/>FPGA<sp/>connection<sp/>in<sp/>shared<sp/>mode\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>program_invocation_short_name);</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="n5010-test_8c_1a443cc7c174314015bd7fe2613c4d8245" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n5010-test_8c_1a443cc7c174314015bd7fe2613c4d8245" kindref="member">parse_mode</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="714"><highlight class="normal">{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010__test" kindref="compound">n5010_test</ref><sp/>*t;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="n5010-test_8c_1a0583be682de6cecd33c5d44955e5ee66" kindref="member">n5010_test</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*<ref refid="structn5010__test" kindref="compound">n5010_test</ref>);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>&amp;<ref refid="structn5010__test" kindref="compound">n5010_test</ref>[i];</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(t-&gt;<ref refid="structn5010__test_1a5700b8f7e0f3b2bccfb8d4ad4328a1a5" kindref="member">name</ref>,<sp/>mode)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>mode<sp/>setting:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>mode);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" kindref="member">test</ref><sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736" refid="n5010-test_8c_1ab750b2af83dc6cbb0aa2d9a9d1b25079" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-test_8c_1ab750b2af83dc6cbb0aa2d9a9d1b25079" kindref="member">parse_args</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">option<sp/><ref refid="object__api_8c_1ab61f552ece35d302b110b6c2e154226f" kindref="member">options</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">,<sp/><sp/>no_argument,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;guid&quot;</highlight><highlight class="normal">,<sp/><sp/>required_argument,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;mode&quot;</highlight><highlight class="normal">,<sp/><sp/>required_argument,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">,<sp/>no_argument,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;shared&quot;</highlight><highlight class="normal">,no_argument,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>NULL,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>0<sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="properties_8h_1a010d3b6839fc8763e66e4f953682a489" kindref="member">fpgaGetProperties</ref>(NULL,<sp/>&amp;<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>properties:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opae_set_properties_from_args(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>,<sp/>&amp;res,<sp/>&amp;argc,<sp/>argv))<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>parse<sp/>device<sp/>args\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>set<sp/>device<sp/>properties:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>default<sp/>connection<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ad0222c8836fd4aeb7a6da6d56d3176d6" kindref="member">open_mode</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>getopt_long_only(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;hg:m:d&quot;</highlight><highlight class="normal">,<sp/><ref refid="object__api_8c_1ab61f552ece35d302b110b6c2e154226f" kindref="member">options</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n5010-test_8c_1a9bd4308d463193b0188339cb5495a58f" kindref="member">print_usage</ref>(stdout);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n5010-test_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" kindref="member">fpga_close</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_SUCCESS);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uuid_parse(optarg,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" kindref="member">guid</ref>)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;unparsable<sp/>uuid:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>optarg);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="n5010-test_8c_1a443cc7c174314015bd7fe2613c4d8245" kindref="member">parse_mode</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>optarg))</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" kindref="member">debug</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ad0222c8836fd4aeb7a6da6d56d3176d6" kindref="member">open_mode</ref><sp/>=<sp/><ref refid="types__enum_8h_1a3a32599a1213352a3217f6e068651fc6a7eb08309368b559a0ecaf8193053a94c" kindref="member">FPGA_OPEN_SHARED</ref>;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uuid_is_null(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" kindref="member">guid</ref>))<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>guid<sp/>given\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>;</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807" refid="n5010-test_8c_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="n5010-test_8c_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="808"><highlight class="normal">{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010" kindref="compound">n5010</ref><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>=<sp/>{.<ref refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" kindref="member">test</ref><sp/>=<sp/><ref refid="structn5010__test" kindref="compound">n5010_test</ref>};</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1ab750b2af83dc6cbb0aa2d9a9d1b25079" kindref="member">parse_args</ref>(argc,<sp/>argv,<sp/>&amp;<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1a8b18501a62f680f0b60aeaf03b0feaaf" kindref="member">fpga_open</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-test_8c_1a2e79fe0581ec5864faa636b5fe0e03a4" kindref="member">fpga_base</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-test_8c_1af1edf9b723cd625e1655f1f12eb21efa" kindref="member">fpga_dump</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>0,<sp/>3);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="structn5010" kindref="compound">n5010</ref>.<ref refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" kindref="member">test</ref>-&gt;<ref refid="structn5010__test_1a475cef5da0662cd3a96b1e0bcbdc67c8" kindref="member">func</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;passed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-test_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" kindref="member">fpga_close</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res<sp/>==<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref><sp/>?<sp/>EXIT_SUCCESS<sp/>:<sp/>res;</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="samples/n5010-test/n5010-test.c"/>
  </compounddef>
</doxygen>
