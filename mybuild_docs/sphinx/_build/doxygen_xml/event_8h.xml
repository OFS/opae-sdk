<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="event_8h" kind="file" language="C++">
    <compoundname>event.h</compoundname>
    <includes refid="types_8h" local="no">opae/types.h</includes>
    <includedby refid="fpga_8h" local="no">include/opae/fpga.h</includedby>
    <incdepgraph>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="6">
        <label>opae/types_enum.h</label>
        <link refid="types__enum_8h"/>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="1">
        <label>include/opae/event.h</label>
        <link refid="event_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>opae/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>samples/hello_fpga/hello_fpga.c</label>
        <link refid="hello__fpga_8c"/>
      </node>
      <node id="7">
        <label>samples/object_api/object_api.c</label>
        <link refid="object__api_8c"/>
      </node>
      <node id="6">
        <label>samples/n5010-test/n5010-test.c</label>
        <link refid="n5010-test_8c"/>
      </node>
      <node id="3">
        <label>samples/hello_events/hello_events.c</label>
        <link refid="hello__events_8c"/>
      </node>
      <node id="1">
        <label>include/opae/event.h</label>
        <link refid="event_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/opae/fpga.h</label>
        <link refid="fpga_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>samples/n5010-ctl/n5010-ctl.c</label>
        <link refid="n5010-ctl_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="event_8h_1a54fb1847300ff886b4ad857716075083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>fpga_result fpgaCreateEventHandle</definition>
        <argsstring>(fpga_event_handle *event_handle)</argsstring>
        <name>fpgaCreateEventHandle</name>
        <param>
          <type><ref refid="types_8h_1acccb4e3dd49efd2b0999b14bf05d5aad" kindref="member">fpga_event_handle</ref> *</type>
          <declname>event_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize an event_handle</para>
<para>Platform independent way to initialize an event_handle used for notifications from the driver to application. For Linux, this function creates an eventfd and returns the eventfd file descriptor in <computeroutput>*event_handle</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">event_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to event handle variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FPGA_OK on success. FPGA_INVALID_PARAM if <computeroutput>event_handle</computeroutput> is NULL. FPGA_NOT_SUPPORTED if platform does not support events. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/opae/event.h" line="63" column="13" declfile="include/opae/event.h" declline="63" declcolumn="13"/>
        <referencedby refid="hello__events_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="hello__events_8c" startline="228" endline="345">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="event_8h_1ab8e748d1c491717d677a96c23dee987b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>fpga_result fpgaDestroyEventHandle</definition>
        <argsstring>(fpga_event_handle *event_handle)</argsstring>
        <name>fpgaDestroyEventHandle</name>
        <param>
          <type><ref refid="types_8h_1acccb4e3dd49efd2b0999b14bf05d5aad" kindref="member">fpga_event_handle</ref> *</type>
          <declname>event_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy an event_handle</para>
<para>Destroy handle and free resources. On Linux this corresponds to closing the file descriptor pointed to by handle</para>
<para><simplesect kind="note"><para><ref refid="event_8h_1ab8e748d1c491717d677a96c23dee987b" kindref="member">fpgaDestroyEventHandle()</ref> requires the address of an event_handle as created by <ref refid="event_8h_1a54fb1847300ff886b4ad857716075083" kindref="member">fpgaCreateEventHandle()</ref>. Passing any other value results in undefined behavior.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle to be destroyed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FPGA_OK on success. FPGA_INVALID_PARAM if <computeroutput>event_handle</computeroutput> is NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/opae/event.h" line="79" column="13" declfile="include/opae/event.h" declline="79" declcolumn="13"/>
        <referencedby refid="hello__events_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="hello__events_8c" startline="228" endline="345">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="event_8h_1a9c38c9cf434a896e7cf02a7df8dc5c2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>fpga_result fpgaGetOSObjectFromEventHandle</definition>
        <argsstring>(const fpga_event_handle eh, int *fd)</argsstring>
        <name>fpgaGetOSObjectFromEventHandle</name>
        <param>
          <type>const <ref refid="types_8h_1acccb4e3dd49efd2b0999b14bf05d5aad" kindref="member">fpga_event_handle</ref></type>
          <declname>eh</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get OS object from event handle</para>
<para>Check validity of event handle, and get the OS object used to subscribe and unsubscribe to events. On Linux, the object corresponds to a file descriptor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">eh</parametername>
</parameternamelist>
<parameterdescription>
<para>Event handle to get the descriptor value from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fd</parametername>
</parameternamelist>
<parameterdescription>
<para>integer to store the descriptor value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FPGA_OK on success. FPGA_INVALID_PARAM if <computeroutput>event_handle</computeroutput> is invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/opae/event.h" line="94" column="13" declfile="include/opae/event.h" declline="94" declcolumn="13"/>
        <referencedby refid="hello__events_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="hello__events_8c" startline="228" endline="345">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="event_8h_1acee9793072cfe2d18a9603339cf5e8a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>fpga_result fpgaRegisterEvent</definition>
        <argsstring>(fpga_handle handle, fpga_event_type event_type, fpga_event_handle event_handle, uint32_t flags)</argsstring>
        <name>fpgaRegisterEvent</name>
        <param>
          <type><ref refid="types_8h_1a4ad40f31195233b629bcde187b0556d5" kindref="member">fpga_handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="types__enum_8h_1a6eccf38d4643d14fbc51f34e03131fa6" kindref="member">fpga_event_type</ref></type>
          <declname>event_type</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1acccb4e3dd49efd2b0999b14bf05d5aad" kindref="member">fpga_event_handle</ref></type>
          <declname>event_handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register an FPGA event</para>
<para>This function tells the driver that the caller is interested in notification for the event specified by the type and flags pair.</para>
<para>The event_handle points to an OS specific mechanism for event notification. An event_handle is associated with only a single event.</para>
<para>In case of user interrupts, the flags parameter will be used to specify the vector ID. The value of the flags parameter indicates the vector ID, no bit encoding is used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to previously opened FPGA resource. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of event </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to previously opened resource for event notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional argument for specifying additional information about event. For example irq number for interrupt events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FPGA_OK on success. FPGA_INVALID_PARAM if handle does not refer to a resource supporting the requested event, or if event_handle is not valid. FPGA_EXCEPTION if an internal exception occurred while accessing the handle or the event_handle. On Linux: FPGA_NO_DAEMON if the driver does not support the requested event and there is no FPGA Daemon (fpgad) running to proxy it. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/opae/event.h" line="125" column="13" declfile="include/opae/event.h" declline="125" declcolumn="13"/>
        <referencedby refid="hello__events_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="hello__events_8c" startline="228" endline="345">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="event_8h_1aa9f920468d8ff05e7411c925a176f5cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>fpga_result fpgaUnregisterEvent</definition>
        <argsstring>(fpga_handle handle, fpga_event_type event_type, fpga_event_handle event_handle)</argsstring>
        <name>fpgaUnregisterEvent</name>
        <param>
          <type><ref refid="types_8h_1a4ad40f31195233b629bcde187b0556d5" kindref="member">fpga_handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="types__enum_8h_1a6eccf38d4643d14fbc51f34e03131fa6" kindref="member">fpga_event_type</ref></type>
          <declname>event_type</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1acccb4e3dd49efd2b0999b14bf05d5aad" kindref="member">fpga_event_handle</ref></type>
          <declname>event_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregister an FPGA event</para>
<para>This function tells the driver that the caller is no longer interested in notification for the event associated with the event_handle</para>
<para>The event_handle points to an OS specific mechanism for event notification. An event_handle is associated with only a single event.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to previously opened FPGA resource. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of event to unregister. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to previously registered resource for event notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FPGA_OK on success. FPGA_INVALID_PARAM if handle does not refer to a resource supporting the requested event, or if event_handle is not valid. FPGA_EXCEPTION if an internal error occurred accessing the handle or the event_handle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/opae/event.h" line="152" column="13" declfile="include/opae/event.h" declline="152" declcolumn="13"/>
        <referencedby refid="hello__events_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="hello__events_8c" startline="228" endline="345">main</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions for registering events and managing the lifecycle for <computeroutput>fpga_event_handle</computeroutput>s. </para>
    </briefdescription>
    <detaileddescription>
<para>OPAE provides an interface to asynchronous events that can be generated by different FPGA resources. The event API provides functions to register for these events; associated with every event a process has registered for is an fpga_event_handle, which encapsulates the OS-specific data structure for event objects. On Linux, an fpga_event_handle can be used as a file descriptor and passed to select(), poll(), epoll() and similar functions to wait for asynchronous events. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright(c)<sp/>2017,<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/><sp/>and<sp/><sp/>use<sp/><sp/>in<sp/>source<sp/><sp/>and<sp/><sp/>binary<sp/><sp/>forms,<sp/><sp/>with<sp/><sp/>or<sp/><sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/><sp/>source<sp/>code<sp/><sp/>must<sp/>retain<sp/>the<sp/><sp/>above<sp/>copyright<sp/>notice,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/><sp/>of<sp/>Intel<sp/>Corporation<sp/><sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>may<sp/>be<sp/>used<sp/>to<sp/><sp/>endorse<sp/>or<sp/>promote<sp/><sp/>products<sp/>derived<sp/><sp/>from<sp/>this<sp/><sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/><sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/><sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIABLE<sp/><sp/>FOR<sp/><sp/>ANY<sp/><sp/>DIRECT,<sp/><sp/>INDIRECT,<sp/><sp/>INCIDENTAL,<sp/><sp/>SPECIAL,<sp/><sp/>EXEMPLARY,<sp/><sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/><sp/>DAMAGES<sp/><sp/>(INCLUDING,<sp/><sp/>BUT<sp/><sp/>NOT<sp/>LIMITED<sp/><sp/>TO,<sp/><sp/>PROCUREMENT<sp/><sp/>OF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/><sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/><sp/>OR<sp/>BUSINESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERRUPTION)<sp/><sp/>HOWEVER<sp/>CAUSED<sp/><sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/><sp/>OF<sp/>LIABILITY,<sp/><sp/>WHETHER<sp/>IN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONTRACT,<sp/><sp/>STRICT<sp/>LIABILITY,<sp/><sp/>OR<sp/>TORT<sp/><sp/>(INCLUDING<sp/>NEGLIGENCE<sp/><sp/>OR<sp/>OTHERWISE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/><sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__FPGA_EVENT_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__FPGA_EVENT_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="types_8h" kindref="compound">opae/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="event_8h_1a54fb1847300ff886b4ad857716075083" refkind="member"><highlight class="normal"><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="event_8h_1a54fb1847300ff886b4ad857716075083" kindref="member">fpgaCreateEventHandle</ref>(<ref refid="types_8h_1acccb4e3dd49efd2b0999b14bf05d5aad" kindref="member">fpga_event_handle</ref><sp/>*event_handle);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="event_8h_1ab8e748d1c491717d677a96c23dee987b" refkind="member"><highlight class="normal"><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="event_8h_1ab8e748d1c491717d677a96c23dee987b" kindref="member">fpgaDestroyEventHandle</ref>(<ref refid="types_8h_1acccb4e3dd49efd2b0999b14bf05d5aad" kindref="member">fpga_event_handle</ref><sp/>*event_handle);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="event_8h_1a9c38c9cf434a896e7cf02a7df8dc5c2e" refkind="member"><highlight class="normal"><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="event_8h_1a9c38c9cf434a896e7cf02a7df8dc5c2e" kindref="member">fpgaGetOSObjectFromEventHandle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8h_1acccb4e3dd49efd2b0999b14bf05d5aad" kindref="member">fpga_event_handle</ref><sp/>eh,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fd);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="event_8h_1acee9793072cfe2d18a9603339cf5e8a7" refkind="member"><highlight class="normal"><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="event_8h_1acee9793072cfe2d18a9603339cf5e8a7" kindref="member">fpgaRegisterEvent</ref>(<ref refid="types_8h_1a4ad40f31195233b629bcde187b0556d5" kindref="member">fpga_handle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="types__enum_8h_1a6eccf38d4643d14fbc51f34e03131fa6" kindref="member">fpga_event_type</ref><sp/>event_type,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="types_8h_1acccb4e3dd49efd2b0999b14bf05d5aad" kindref="member">fpga_event_handle</ref><sp/>event_handle,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>flags);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="event_8h_1aa9f920468d8ff05e7411c925a176f5cb" refkind="member"><highlight class="normal"><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="event_8h_1aa9f920468d8ff05e7411c925a176f5cb" kindref="member">fpgaUnregisterEvent</ref>(<ref refid="types_8h_1a4ad40f31195233b629bcde187b0556d5" kindref="member">fpga_handle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="types__enum_8h_1a6eccf38d4643d14fbc51f34e03131fa6" kindref="member">fpga_event_type</ref><sp/>event_type,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="types_8h_1acccb4e3dd49efd2b0999b14bf05d5aad" kindref="member">fpga_event_handle</ref><sp/>event_handle);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__FPGA_EVENT_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/opae/event.h"/>
  </compounddef>
</doxygen>
