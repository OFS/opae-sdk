<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="n5010-ctl_8c" kind="file" language="C++">
    <compoundname>n5010-ctl.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">errno.h</includes>
    <includes refid="error_8h" local="no">error.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">getopt.h</includes>
    <includes refid="fpga_8h" local="no">opae/fpga.h</includes>
    <includes local="no">uuid/uuid.h</includes>
    <includes local="no">endian.h</includes>
    <includes local="yes">argsfilter.h</includes>
    <incdepgraph>
      <node id="10">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>endian.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="30">
        <label>opae/userclk.h</label>
        <link refid="userclk_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>errno.h</label>
      </node>
      <node id="28">
        <label>opae/version.h</label>
        <link refid="version_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>opae/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>opae/types_enum.h</label>
        <link refid="types__enum_8h"/>
      </node>
      <node id="32">
        <label>uuid/uuid.h</label>
      </node>
      <node id="9">
        <label>stddef.h</label>
      </node>
      <node id="23">
        <label>opae/manage.h</label>
        <link refid="manage_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>opae/metrics.h</label>
        <link refid="metrics_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>opae/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>opae/sysobject.h</label>
        <link refid="sysobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
      <node id="13">
        <label>signal.h</label>
      </node>
      <node id="22">
        <label>opae/event.h</label>
        <link refid="event_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>opae/properties.h</label>
        <link refid="properties_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>time.h</label>
      </node>
      <node id="26">
        <label>opae/umsg.h</label>
        <link refid="umsg_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>opae/fpga.h</label>
        <link refid="fpga_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>opae/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>opae/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>getopt.h</label>
      </node>
      <node id="19">
        <label>opae/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>opae/mmio.h</label>
        <link refid="include_2opae_2mmio_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>argsfilter.h</label>
      </node>
      <node id="18">
        <label>opae/init.h</label>
        <link refid="init_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>samples/n5010-ctl/n5010-ctl.c</label>
        <link refid="n5010-ctl_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="16">
        <label>opae/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structn5010__test" prot="public">n5010_test</innerclass>
    <innerclass refid="structn5010" prot="public">n5010</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="n5010-ctl_8c_1a64d2514266ba20fce840e5648ef89199" prot="public" static="no">
        <name>DFH_EOL</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt; 40) &amp; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="43" column="9" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-ctl_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" prot="public" static="no">
        <name>DFH_NEXT</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt; 16) &amp; 0xffffff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="44" column="9" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-ctl_8c_1aca731dc493c4ea43958cb0435cdaa571" prot="public" static="no">
        <name>DFH_TYPE</name>
        <param><defname>h</defname></param>
        <initializer>((h &gt;&gt; 60) &amp; 0xf)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="45" column="9" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-ctl_8c_1a57df7e6b18c59c759284e4129b591829" prot="public" static="no">
        <name>DFH_TYPE_AFU</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="46" column="9" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-ctl_8c_1a401e1a60d6381236216b6a130a6685bd" prot="public" static="no">
        <name>MAX_PORT</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="48" column="9" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-ctl_8c_1a6f07d0094e837d61131ab0b3aa8ab1fc" prot="public" static="no">
        <name>INVALID_PORT</name>
        <initializer>(<ref refid="n5010-ctl_8c_1a401e1a60d6381236216b6a130a6685bd" kindref="member">MAX_PORT</ref> + 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="49" column="9" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-ctl_8c_1ae5b8e415198ec56ea5cf5fd1b07380df" prot="public" static="no">
        <name>CVL0_QSFP01_SWITCH</name>
        <initializer>0x28</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="50" column="9" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n5010-ctl_8c_1a5c7a15c4dfb0142c7a87e6f70d7cd104" prot="public" static="no">
        <name>CVL1_QSFP23_SWITCH</name>
        <initializer>0x30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="51" column="9" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="n5010-ctl_8c_1a514ebab49a2fb401d7d7e220a97300e5" prot="public" static="no" mutable="no">
        <type>char const  *</type>
        <definition>char const* default_guid</definition>
        <argsstring></argsstring>
        <name>default_guid</name>
        <initializer>= &quot;c48d4e2a-9121-497d-adc7-3640729ec6f7&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="53" column="12" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="53" bodyend="-1"/>
        <referencedby refid="n5010-ctl_8c_1adde1c5cf0a410d13f51b29238589fd42" compoundref="n5010-ctl_8c" startline="385" endline="438">parse_args</referencedby>
        <referencedby refid="n5010-ctl_8c_1a9bd4308d463193b0188339cb5495a58f" compoundref="n5010-ctl_8c" startline="328" endline="342">print_usage</referencedby>
      </memberdef>
      <memberdef kind="variable" id="n5010-ctl_8c_1acb99505dbfaf7824f8725dff90d47ca8" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>volatile bool stop</definition>
        <argsstring></argsstring>
        <name>stop</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="57" column="22" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="57" bodyend="-1"/>
        <referencedby refid="n5010-ctl_8c_1aa566e69cffeabc52ffa796bd9193ab03" compoundref="n5010-ctl_8c" startline="319" endline="326">fpga_run</referencedby>
        <referencedby refid="n5010-ctl_8c_1a89a8322bea357674e81ba9cbdefe0378" compoundref="n5010-ctl_8c" startline="58" endline="67">signal_callback_handler</referencedby>
      </memberdef>
      <memberdef kind="variable" id="n5010-ctl_8c_1a0583be682de6cecd33c5d44955e5ee66" prot="public" static="yes" mutable="no">
        <type>const struct <ref refid="structn5010__test" kindref="compound">n5010_test</ref></type>
        <definition>const struct n5010_test n5010_test[]</definition>
        <argsstring>[]</argsstring>
        <name>n5010_test</name>
        <initializer>= {
	{
		.name = &quot;setsw&quot;,
		.func = <ref refid="n5010-ctl_8c_1af49d8292da513d31bb1a0a16861e230a" kindref="member">fpga_setread_switch</ref>,
	},
	{
		.name = &quot;readsw&quot;,
		.func = <ref refid="n5010-ctl_8c_1a9ceebefbea1cedb27769eb8d6a78b6fb" kindref="member">fpga_read_switch</ref>,
	},
	{
		.name = &quot;runsw&quot;,
		.func = <ref refid="n5010-ctl_8c_1aa566e69cffeabc52ffa796bd9193ab03" kindref="member">fpga_run</ref>,
	},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="89" column="20" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="91" bodyend="-1"/>
        <referencedby refid="n5010-ctl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-ctl_8c" startline="440" endline="494">main</referencedby>
        <referencedby refid="n5010-ctl_8c_1a443cc7c174314015bd7fe2613c4d8245" compoundref="n5010-ctl_8c" startline="362" endline="383">parse_mode</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="n5010-ctl_8c_1a89a8322bea357674e81ba9cbdefe0378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void signal_callback_handler</definition>
        <argsstring>(int signum)</argsstring>
        <name>signal_callback_handler</name>
        <param>
          <type>int</type>
          <declname>signum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="58" column="6" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="58" bodyend="67"/>
        <references refid="n5010-ctl_8c_1acb99505dbfaf7824f8725dff90d47ca8" compoundref="n5010-ctl_8c" startline="57">stop</references>
        <referencedby refid="n5010-ctl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-ctl_8c" startline="440" endline="494">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1af49d8292da513d31bb1a0a16861e230a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_setread_switch</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_setread_switch</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="305" column="20" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="305" bodyend="317" declfile="samples/n5010-ctl/n5010-ctl.c" declline="87" declcolumn="20"/>
        <references refid="n5010-ctl_8c_1a9ceebefbea1cedb27769eb8d6a78b6fb" compoundref="n5010-ctl_8c" startline="298" endline="303">fpga_read_switch</references>
        <references refid="n5010-ctl_8c_1a6596f7a4b6b9ac8060d18e3f40f42334" compoundref="n5010-ctl_8c" startline="263" endline="283">fpga_set_switch</references>
        <references refid="n5010-ctl_8c_1a6f07d0094e837d61131ab0b3aa8ab1fc" compoundref="n5010-ctl_8c" startline="49">INVALID_PORT</references>
        <references refid="structn5010_1a67f77d17592900684681c485ed981f3d" compoundref="n5010-ctl_8c" startline="83">n5010::port</references>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1a9ceebefbea1cedb27769eb8d6a78b6fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_read_switch</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_read_switch</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="298" column="20" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="298" bodyend="303" declfile="samples/n5010-ctl/n5010-ctl.c" declline="88" declcolumn="20"/>
        <references refid="n5010-ctl_8c_1a46c13d0ab2132699eac8a7830a536d7c" compoundref="n5010-ctl_8c" startline="285" endline="296">fpga_read_switch_port</references>
        <referencedby refid="n5010-ctl_8c_1af49d8292da513d31bb1a0a16861e230a" compoundref="n5010-ctl_8c" startline="305" endline="317">fpga_setread_switch</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1a71f08c9d467b2c0d6627c2a19182406e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_run</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_run</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="89" column="20" declfile="samples/n5010-ctl/n5010-ctl.c" declline="89" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1a8b18501a62f680f0b60aeaf03b0feaaf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_open</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_open</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="107" column="20" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="107" bodyend="154"/>
        <references refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" compoundref="n5010-ctl_8c" startline="77">n5010::filter</references>
        <references refid="types__enum_8h_1a9b2ddb9e533441e79f19d45fa0a24934a5c3973a253ffaabddd0a083f05abebc7" compoundref="types__enum_8h" startline="114">FPGA_ACCELERATOR</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da7aee5958cf7f46e9d80c4ee50d42d86c" compoundref="types__enum_8h" startline="62">FPGA_NOT_FOUND</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="types__enum_8h_1a3a32599a1213352a3217f6e068651fc6a7eb08309368b559a0ecaf8193053a94c" compoundref="types__enum_8h" startline="158">FPGA_OPEN_SHARED</references>
        <references refid="access_8h_1ac83789ebb65dc6b2adeae3d7e7fa3e79">fpgaClose</references>
        <references refid="enum_8h_1a277ba17f2377895855545bd82c1f901d">fpgaEnumerate</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a2903267d37ea5c64522b0addce74da5f">fpgaMapMMIO</references>
        <references refid="access_8h_1addde6b2bafcd6632a2c0b595c6bc0ef3">fpgaOpen</references>
        <references refid="properties_8h_1a71ad1e59994b2c8b04ea036a64515117">fpgaPropertiesSetGUID</references>
        <references refid="properties_8h_1a3724caa06200e0d3f0b56611c379d75b">fpgaPropertiesSetObjectType</references>
        <references refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" compoundref="n5010-ctl_8c" startline="80">n5010::guid</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <references refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" compoundref="n5010-ctl_8c" startline="78">n5010::token</references>
        <referencedby refid="n5010-ctl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-ctl_8c" startline="440" endline="494">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fpga_close</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_close</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="156" column="13" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="156" bodyend="178"/>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="access_8h_1ac83789ebb65dc6b2adeae3d7e7fa3e79">fpgaClose</references>
        <references refid="enum_8h_1a150a7a8f46e0d6df12cc329ff7030e21">fpgaDestroyToken</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a8c8db22506e1fbfd16440c660bfee28f">fpgaUnmapMMIO</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <references refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" compoundref="n5010-ctl_8c" startline="78">n5010::token</references>
        <referencedby refid="n5010-ctl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-ctl_8c" startline="440" endline="494">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1a2e79fe0581ec5864faa636b5fe0e03a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_base</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_base</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="180" column="20" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="180" bodyend="244"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="n5010-ctl_8c_1a64d2514266ba20fce840e5648ef89199" compoundref="n5010-ctl_8c" startline="43">DFH_EOL</references>
        <references refid="n5010-ctl_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" compoundref="n5010-ctl_8c" startline="44">DFH_NEXT</references>
        <references refid="n5010-ctl_8c_1aca731dc493c4ea43958cb0435cdaa571" compoundref="n5010-ctl_8c" startline="45">DFH_TYPE</references>
        <references refid="n5010-ctl_8c_1a57df7e6b18c59c759284e4129b591829" compoundref="n5010-ctl_8c" startline="46">DFH_TYPE_AFU</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da7aee5958cf7f46e9d80c4ee50d42d86c" compoundref="types__enum_8h" startline="62">FPGA_NOT_FOUND</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" compoundref="n5010-ctl_8c" startline="80">n5010::guid</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <referencedby refid="n5010-ctl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-ctl_8c" startline="440" endline="494">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1af1edf9b723cd625e1655f1f12eb21efa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fpga_dump</definition>
        <argsstring>(struct n5010 *n5010, uint64_t offset, size_t count)</argsstring>
        <name>fpga_dump</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="246" column="13" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="246" bodyend="260"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" compoundref="n5010-ctl_8c" startline="84">n5010::debug</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <referencedby refid="n5010-ctl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-ctl_8c" startline="440" endline="494">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1a6596f7a4b6b9ac8060d18e3f40f42334" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_set_switch</definition>
        <argsstring>(struct n5010 *n5010)</argsstring>
        <name>fpga_set_switch</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="263" column="20" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="263" bodyend="283"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="n5010-ctl_8c_1ae5b8e415198ec56ea5cf5fd1b07380df" compoundref="n5010-ctl_8c" startline="50">CVL0_QSFP01_SWITCH</references>
        <references refid="n5010-ctl_8c_1a5c7a15c4dfb0142c7a87e6f70d7cd104" compoundref="n5010-ctl_8c" startline="51">CVL1_QSFP23_SWITCH</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="include_2opae_2mmio_8h_1a6df7f745d9b9d47582714fe8e2d1a761">fpgaWriteMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <references refid="structn5010_1a67f77d17592900684681c485ed981f3d" compoundref="n5010-ctl_8c" startline="83">n5010::port</references>
        <referencedby refid="n5010-ctl_8c_1af49d8292da513d31bb1a0a16861e230a" compoundref="n5010-ctl_8c" startline="305" endline="317">fpga_setread_switch</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1a46c13d0ab2132699eac8a7830a536d7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_read_switch_port</definition>
        <argsstring>(struct n5010 *n5010, uint32_t cvl)</argsstring>
        <name>fpga_read_switch_port</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cvl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="285" column="20" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="285" bodyend="296"/>
        <references refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" compoundref="n5010-ctl_8c" startline="81">n5010::base</references>
        <references refid="n5010-ctl_8c_1ae5b8e415198ec56ea5cf5fd1b07380df" compoundref="n5010-ctl_8c" startline="50">CVL0_QSFP01_SWITCH</references>
        <references refid="n5010-ctl_8c_1a5c7a15c4dfb0142c7a87e6f70d7cd104" compoundref="n5010-ctl_8c" startline="51">CVL1_QSFP23_SWITCH</references>
        <references refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187">fpgaReadMMIO64</references>
        <references refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" compoundref="n5010-ctl_8c" startline="79">n5010::handle</references>
        <referencedby refid="n5010-ctl_8c_1a9ceebefbea1cedb27769eb8d6a78b6fb" compoundref="n5010-ctl_8c" startline="298" endline="303">fpga_read_switch</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1aa566e69cffeabc52ffa796bd9193ab03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref></type>
        <definition>static fpga_result fpga_run</definition>
        <argsstring>(__attribute__((unused)) struct n5010 *n5010)</argsstring>
        <name>fpga_run</name>
        <param>
          <type>__attribute__((unused)) struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="319" column="20" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="319" bodyend="326"/>
        <references refid="n5010-ctl_8c_1acb99505dbfaf7824f8725dff90d47ca8" compoundref="n5010-ctl_8c" startline="57">stop</references>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1a9bd4308d463193b0188339cb5495a58f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_usage</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>print_usage</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="328" column="13" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="328" bodyend="342"/>
        <references refid="n5010-ctl_8c_1a514ebab49a2fb401d7d7e220a97300e5" compoundref="n5010-ctl_8c" startline="53">default_guid</references>
        <referencedby refid="n5010-ctl_8c_1adde1c5cf0a410d13f51b29238589fd42" compoundref="n5010-ctl_8c" startline="385" endline="438">parse_args</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1abf670aede0d10582400b91cb54634821" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool parse_port</definition>
        <argsstring>(struct n5010 *n5010, const char *port_str)</argsstring>
        <name>parse_port</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>port_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="344" column="13" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="344" bodyend="360"/>
        <references refid="n5010-ctl_8c_1a401e1a60d6381236216b6a130a6685bd" compoundref="n5010-ctl_8c" startline="48">MAX_PORT</references>
        <references refid="structn5010_1a67f77d17592900684681c485ed981f3d" compoundref="n5010-ctl_8c" startline="83">n5010::port</references>
        <referencedby refid="n5010-ctl_8c_1adde1c5cf0a410d13f51b29238589fd42" compoundref="n5010-ctl_8c" startline="385" endline="438">parse_args</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1a443cc7c174314015bd7fe2613c4d8245" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool parse_mode</definition>
        <argsstring>(struct n5010 *n5010, const char *mode)</argsstring>
        <name>parse_mode</name>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="362" column="13" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="362" bodyend="383"/>
        <references refid="n5010-ctl_8c_1a0583be682de6cecd33c5d44955e5ee66" compoundref="n5010-ctl_8c" startline="91">n5010_test</references>
        <references refid="structn5010__test_1a5700b8f7e0f3b2bccfb8d4ad4328a1a5" compoundref="n5010-ctl_8c" startline="72">n5010_test::name</references>
        <references refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" compoundref="n5010-ctl_8c" startline="82">n5010::test</references>
        <referencedby refid="n5010-ctl_8c_1adde1c5cf0a410d13f51b29238589fd42" compoundref="n5010-ctl_8c" startline="385" endline="438">parse_args</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1adde1c5cf0a410d13f51b29238589fd42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parse_args</definition>
        <argsstring>(int argc, char **argv, struct n5010 *n5010)</argsstring>
        <name>parse_args</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>struct <ref refid="structn5010" kindref="compound">n5010</ref> *</type>
          <declname>n5010</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="385" column="12" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="385" bodyend="438"/>
        <references refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" compoundref="n5010-ctl_8c" startline="84">n5010::debug</references>
        <references refid="n5010-ctl_8c_1a514ebab49a2fb401d7d7e220a97300e5" compoundref="n5010-ctl_8c" startline="53">default_guid</references>
        <references refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" compoundref="n5010-ctl_8c" startline="80">n5010::guid</references>
        <references refid="n5010-ctl_8c_1a6f07d0094e837d61131ab0b3aa8ab1fc" compoundref="n5010-ctl_8c" startline="49">INVALID_PORT</references>
        <references refid="object__api_8c_1ab61f552ece35d302b110b6c2e154226f">options</references>
        <references refid="n5010-ctl_8c_1a443cc7c174314015bd7fe2613c4d8245" compoundref="n5010-ctl_8c" startline="362" endline="383">parse_mode</references>
        <references refid="n5010-ctl_8c_1abf670aede0d10582400b91cb54634821" compoundref="n5010-ctl_8c" startline="344" endline="360">parse_port</references>
        <references refid="structn5010_1a67f77d17592900684681c485ed981f3d" compoundref="n5010-ctl_8c" startline="83">n5010::port</references>
        <references refid="n5010-ctl_8c_1a9bd4308d463193b0188339cb5495a58f" compoundref="n5010-ctl_8c" startline="328" endline="342">print_usage</references>
        <referencedby refid="n5010-ctl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="n5010-ctl_8c" startline="440" endline="494">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="n5010-ctl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="samples/n5010-ctl/n5010-ctl.c" line="440" column="5" bodyfile="samples/n5010-ctl/n5010-ctl.c" bodystart="440" bodyend="494"/>
        <references refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" compoundref="n5010-ctl_8c" startline="77">n5010::filter</references>
        <references refid="n5010-ctl_8c_1a2e79fe0581ec5864faa636b5fe0e03a4" compoundref="n5010-ctl_8c" startline="180" endline="244">fpga_base</references>
        <references refid="n5010-ctl_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" compoundref="n5010-ctl_8c" startline="156" endline="178">fpga_close</references>
        <references refid="n5010-ctl_8c_1af1edf9b723cd625e1655f1f12eb21efa" compoundref="n5010-ctl_8c" startline="246" endline="260">fpga_dump</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" compoundref="types__enum_8h" startline="61">FPGA_EXCEPTION</references>
        <references refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" compoundref="types__enum_8h" startline="58">FPGA_OK</references>
        <references refid="n5010-ctl_8c_1a8b18501a62f680f0b60aeaf03b0feaaf" compoundref="n5010-ctl_8c" startline="107" endline="154">fpga_open</references>
        <references refid="properties_8h_1a6f83533f996cf6bd25274e0b7b9c3050">fpgaDestroyProperties</references>
        <references refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32">fpgaErrStr</references>
        <references refid="properties_8h_1a010d3b6839fc8763e66e4f953682a489">fpgaGetProperties</references>
        <references refid="structn5010__test_1a475cef5da0662cd3a96b1e0bcbdc67c8" compoundref="n5010-ctl_8c" startline="73">n5010_test::func</references>
        <references refid="n5010-ctl_8c_1a0583be682de6cecd33c5d44955e5ee66" compoundref="n5010-ctl_8c" startline="91">n5010_test</references>
        <references refid="n5010-ctl_8c_1adde1c5cf0a410d13f51b29238589fd42" compoundref="n5010-ctl_8c" startline="385" endline="438">parse_args</references>
        <references refid="n5010-ctl_8c_1a89a8322bea357674e81ba9cbdefe0378" compoundref="n5010-ctl_8c" startline="58" endline="67">signal_callback_handler</references>
        <references refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" compoundref="n5010-ctl_8c" startline="82">n5010::test</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright(c)<sp/>2021,<sp/>Silciom<sp/>Denmark<sp/>A/S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/><sp/>and<sp/><sp/>use<sp/><sp/>in<sp/>source<sp/><sp/>and<sp/><sp/>binary<sp/><sp/>forms,<sp/><sp/>with<sp/><sp/>or<sp/><sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/><sp/>source<sp/>code<sp/><sp/>must<sp/>retain<sp/>the<sp/><sp/>above<sp/>copyright<sp/>notice,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/><sp/>of<sp/>Intel<sp/>Corporation<sp/><sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>may<sp/>be<sp/>used<sp/>to<sp/><sp/>endorse<sp/>or<sp/>promote<sp/><sp/>products<sp/>derived<sp/><sp/>from<sp/>this<sp/><sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/><sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/><sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIABLE<sp/><sp/>FOR<sp/><sp/>ANY<sp/><sp/>DIRECT,<sp/><sp/>INDIRECT,<sp/><sp/>INCIDENTAL,<sp/><sp/>SPECIAL,<sp/><sp/>EXEMPLARY,<sp/><sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/><sp/>DAMAGES<sp/><sp/>(INCLUDING,<sp/><sp/>BUT<sp/><sp/>NOT<sp/>LIMITED<sp/><sp/>TO,<sp/><sp/>PROCUREMENT<sp/><sp/>OF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/><sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/><sp/>OR<sp/>BUSINESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERRUPTION)<sp/><sp/>HOWEVER<sp/>CAUSED<sp/><sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/><sp/>OF<sp/>LIABILITY,<sp/><sp/>WHETHER<sp/>IN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONTRACT,<sp/><sp/>STRICT<sp/>LIABILITY,<sp/><sp/>OR<sp/>TORT<sp/><sp/>(INCLUDING<sp/>NEGLIGENCE<sp/><sp/>OR<sp/>OTHERWISE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/><sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile:<sp/>sudo<sp/>gcc<sp/>-DSTATIC=static<sp/>-D_GNU_SOURCE<sp/>-I<sp/>/usr/src/opae/argsfilter<sp/>/usr/src/opae/argsfilter/argsfilter.c<sp/>n5010-ctl.c<sp/>-o<sp/>n5010-ctl<sp/>-l<sp/>opae-c<sp/>-l<sp/>uuid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="error_8h" kindref="compound">error.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;getopt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fpga_8h" kindref="compound">opae/fpga.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uuid/uuid.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;endian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;argsfilter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="n5010-ctl_8c_1a64d2514266ba20fce840e5648ef89199" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFH_EOL(h)<sp/>((h<sp/>&gt;&gt;<sp/>40)<sp/>&amp;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="n5010-ctl_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFH_NEXT(h)<sp/>((h<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xffffff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="n5010-ctl_8c_1aca731dc493c4ea43958cb0435cdaa571" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFH_TYPE(h)<sp/>((h<sp/>&gt;&gt;<sp/>60)<sp/>&amp;<sp/>0xf)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="n5010-ctl_8c_1a57df7e6b18c59c759284e4129b591829" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFH_TYPE_AFU<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="n5010-ctl_8c_1a401e1a60d6381236216b6a130a6685bd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_PORT<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="n5010-ctl_8c_1a6f07d0094e837d61131ab0b3aa8ab1fc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INVALID_PORT<sp/>(MAX_PORT<sp/>+<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="n5010-ctl_8c_1ae5b8e415198ec56ea5cf5fd1b07380df" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CVL0_QSFP01_SWITCH<sp/>0x28</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="n5010-ctl_8c_1a5c7a15c4dfb0142c7a87e6f70d7cd104" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CVL1_QSFP23_SWITCH<sp/>0x30</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="n5010-ctl_8c_1a514ebab49a2fb401d7d7e220a97300e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="n5010-ctl_8c_1a514ebab49a2fb401d7d7e220a97300e5" kindref="member">default_guid</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;c48d4e2a-9121-497d-adc7-3640729ec6f7&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>function<sp/>to<sp/>be<sp/>called<sp/>when<sp/>ctrl-c<sp/>(SIGINT)<sp/>signal<sp/>is<sp/>sent<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="n5010-ctl_8c_1acb99505dbfaf7824f8725dff90d47ca8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n5010-ctl_8c_1acb99505dbfaf7824f8725dff90d47ca8" kindref="member">stop</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58" refid="n5010-ctl_8c_1a89a8322bea357674e81ba9cbdefe0378" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n5010-ctl_8c_1a89a8322bea357674e81ba9cbdefe0378" kindref="member">signal_callback_handler</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signum)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(signum)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SIGINT:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n5010-ctl_8c_1acb99505dbfaf7824f8725dff90d47ca8" kindref="member">stop</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010" kindref="compound">n5010</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structn5010__test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010__test" kindref="compound">n5010_test</ref><sp/>{</highlight></codeline>
<codeline lineno="72" refid="structn5010__test_1a5700b8f7e0f3b2bccfb8d4ad4328a1a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structn5010__test_1a5700b8f7e0f3b2bccfb8d4ad4328a1a5" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="73" refid="structn5010__test_1a475cef5da0662cd3a96b1e0bcbdc67c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>(*<ref refid="structn5010__test_1a475cef5da0662cd3a96b1e0bcbdc67c8" kindref="member">func</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structn5010" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010" kindref="compound">n5010</ref><sp/>{</highlight></codeline>
<codeline lineno="77" refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="types_8h_1ab868bdeab946a8059abe7e9c114aee56" kindref="member">fpga_properties</ref><sp/><ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>;</highlight></codeline>
<codeline lineno="78" refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="types_8h_1a252f538a10fb51d0988ed52946516d9e" kindref="member">fpga_token</ref><sp/><ref refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" kindref="member">token</ref>;</highlight></codeline>
<codeline lineno="79" refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="types_8h_1a4ad40f31195233b629bcde187b0556d5" kindref="member">fpga_handle</ref><sp/><ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="80" refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="types_8h_1af0b6683499be79fab39ac41db02e7abf" kindref="member">fpga_guid</ref><sp/><ref refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" kindref="member">guid</ref>;</highlight></codeline>
<codeline lineno="81" refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/><ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="82" refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010__test" kindref="compound">n5010_test</ref><sp/>*<ref refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" kindref="member">test</ref>;</highlight></codeline>
<codeline lineno="83" refid="structn5010_1a67f77d17592900684681c485ed981f3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/><ref refid="structn5010_1a67f77d17592900684681c485ed981f3d" kindref="member">port</ref>;</highlight></codeline>
<codeline lineno="84" refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" kindref="member">debug</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-ctl_8c_1af49d8292da513d31bb1a0a16861e230a" kindref="member">fpga_setread_switch</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-ctl_8c_1a9ceebefbea1cedb27769eb8d6a78b6fb" kindref="member">fpga_read_switch</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="89" refid="n5010-ctl_8c_1a71f08c9d467b2c0d6627c2a19182406e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-ctl_8c_1a71f08c9d467b2c0d6627c2a19182406e" kindref="member">fpga_run</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010__test" kindref="compound">n5010_test</ref><sp/><ref refid="structn5010__test" kindref="compound">n5010_test</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structn5010__test_1a5700b8f7e0f3b2bccfb8d4ad4328a1a5" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;setsw&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.func<sp/>=<sp/><ref refid="n5010-ctl_8c_1af49d8292da513d31bb1a0a16861e230a" kindref="member">fpga_setread_switch</ref>,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;readsw&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.func<sp/>=<sp/><ref refid="n5010-ctl_8c_1a9ceebefbea1cedb27769eb8d6a78b6fb" kindref="member">fpga_read_switch</ref>,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;runsw&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.func<sp/>=<sp/><ref refid="n5010-ctl_8c_1a71f08c9d467b2c0d6627c2a19182406e" kindref="member">fpga_run</ref>,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="n5010-ctl_8c_1a8b18501a62f680f0b60aeaf03b0feaaf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-ctl_8c_1a8b18501a62f680f0b60aeaf03b0feaaf" kindref="member">fpga_open</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="properties_8h_1a3724caa06200e0d3f0b56611c379d75b" kindref="member">fpgaPropertiesSetObjectType</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>,<sp/><ref refid="types__enum_8h_1a9b2ddb9e533441e79f19d45fa0a24934a5c3973a253ffaabddd0a083f05abebc7" kindref="member">FPGA_ACCELERATOR</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>set<sp/>object<sp/>type:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="properties_8h_1a71ad1e59994b2c8b04ea036a64515117" kindref="member">fpgaPropertiesSetGUID</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" kindref="member">guid</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>set<sp/>guid:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="enum_8h_1a277ba17f2377895855545bd82c1f901d" kindref="member">fpgaEnumerate</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>,<sp/>1,<sp/>&amp;<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" kindref="member">token</ref>,<sp/>1,<sp/>&amp;num);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>enumerate<sp/>fpga:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da7aee5958cf7f46e9d80c4ee50d42d86c" kindref="member">FPGA_NOT_FOUND</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>find<sp/>fpga<sp/>with<sp/>guid:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="access_8h_1addde6b2bafcd6632a2c0b595c6bc0ef3" kindref="member">fpgaOpen</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" kindref="member">token</ref>,<sp/>&amp;<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/><ref refid="types__enum_8h_1a3a32599a1213352a3217f6e068651fc6a7eb08309368b559a0ecaf8193053a94c" kindref="member">FPGA_OPEN_SHARED</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>open<sp/>fpga:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a2903267d37ea5c64522b0addce74da5f" kindref="member">fpgaMapMMIO</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>map<sp/>io<sp/>memory:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="access_8h_1ac83789ebb65dc6b2adeae3d7e7fa3e79" kindref="member">fpgaClose</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="n5010-ctl_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n5010-ctl_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" kindref="member">fpga_close</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a8c8db22506e1fbfd16440c660bfee28f" kindref="member">fpgaUnmapMMIO</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>unmap<sp/>io<sp/>memory:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="access_8h_1ac83789ebb65dc6b2adeae3d7e7fa3e79" kindref="member">fpgaClose</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>close<sp/>fpga:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" kindref="member">token</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="enum_8h_1a150a7a8f46e0d6df12cc329ff7030e21" kindref="member">fpgaDestroyToken</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a0cd89aec173afe291731dbf496a15e89" kindref="member">token</ref>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>destroy<sp/>token:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="n5010-ctl_8c_1a2e79fe0581ec5864faa636b5fe0e03a4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-ctl_8c_1a2e79fe0581ec5864faa636b5fe0e03a4" kindref="member">fpga_base</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>header;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uuid_t<sp/>u128;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>u64[2];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>uuid;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref>,<sp/>&amp;header);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>dfh:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>8,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;uuid.u64[1]);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>uuid<sp/>high:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>16,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;uuid.u64[0]);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>uuid<sp/>low:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uuid.u64[i]<sp/>=<sp/>be64toh(uuid.u64[i]);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n5010-ctl_8c_1aca731dc493c4ea43958cb0435cdaa571" kindref="member">DFH_TYPE</ref>(header)<sp/>==<sp/><ref refid="n5010-ctl_8c_1a57df7e6b18c59c759284e4129b591829" kindref="member">DFH_TYPE_AFU</ref></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>uuid_compare(uuid.u128,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" kindref="member">guid</ref>)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n5010-ctl_8c_1a64d2514266ba20fce840e5648ef89199" kindref="member">DFH_EOL</ref>(header))<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>matching<sp/>dfh<sp/>found:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da7aee5958cf7f46e9d80c4ee50d42d86c" kindref="member">FPGA_NOT_FOUND</ref>;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n5010-ctl_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" kindref="member">DFH_NEXT</ref>(header)<sp/>==<sp/>0<sp/>||<sp/><ref refid="n5010-ctl_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" kindref="member">DFH_NEXT</ref>(header)<sp/>==<sp/>0xffff)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;next<sp/>dfh<sp/>not<sp/>found:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da7aee5958cf7f46e9d80c4ee50d42d86c" kindref="member">FPGA_NOT_FOUND</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+=<sp/><ref refid="n5010-ctl_8c_1aa14c35cd3b1b02bd5b753c3d19c05308" kindref="member">DFH_NEXT</ref>(header);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="n5010-ctl_8c_1af1edf9b723cd625e1655f1f12eb21efa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n5010-ctl_8c_1af1edf9b723cd625e1655f1f12eb21efa" kindref="member">fpga_dump</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>uint64_t<sp/>offset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>base<sp/>=<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" kindref="member">debug</ref>)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>reg<sp/>=<sp/>base<sp/>+<sp/>i<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>val;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/>reg,<sp/>&amp;val);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;reg:<sp/>0x%04jx,<sp/>val:<sp/>0x%016jx\n&quot;</highlight><highlight class="normal">,<sp/>reg,<sp/>val);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="n5010-ctl_8c_1a6596f7a4b6b9ac8060d18e3f40f42334" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-ctl_8c_1a6596f7a4b6b9ac8060d18e3f40f42334" kindref="member">fpga_set_switch</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>offset<sp/>=<sp/><ref refid="n5010-ctl_8c_1ae5b8e415198ec56ea5cf5fd1b07380df" kindref="member">CVL0_QSFP01_SWITCH</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>port<sp/>=<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a67f77d17592900684681c485ed981f3d" kindref="member">port</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a67f77d17592900684681c485ed981f3d" kindref="member">port</ref><sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>port<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/><ref refid="n5010-ctl_8c_1a5c7a15c4dfb0142c7a87e6f70d7cd104" kindref="member">CVL1_QSFP23_SWITCH</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="include_2opae_2mmio_8h_1a6df7f745d9b9d47582714fe8e2d1a761" kindref="member">fpgaWriteMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>offset,<sp/>port);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>set<sp/>switch:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="n5010-ctl_8c_1a46c13d0ab2132699eac8a7830a536d7c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-ctl_8c_1a46c13d0ab2132699eac8a7830a536d7c" kindref="member">fpga_read_switch_port</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>uint32_t<sp/>cvl)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>port<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/>offset<sp/>=<sp/><ref refid="n5010-ctl_8c_1ae5b8e415198ec56ea5cf5fd1b07380df" kindref="member">CVL0_QSFP01_SWITCH</ref>;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cvl<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/><ref refid="n5010-ctl_8c_1a5c7a15c4dfb0142c7a87e6f70d7cd104" kindref="member">CVL1_QSFP23_SWITCH</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2opae_2mmio_8h_1a011ba900710ddf70c13ca089c4742187" kindref="member">fpgaReadMMIO64</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a2a3c98ab8a1308a684bbb24cc837bbce" kindref="member">handle</ref>,<sp/>0,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1abc1821c363984324ab8a00dca071a2a6" kindref="member">base</ref><sp/>+<sp/>offset,<sp/>&amp;port);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;CVL:<sp/>%u<sp/>connected<sp/>to<sp/>front<sp/>port:<sp/>%lu\n&quot;</highlight><highlight class="normal">,<sp/>cvl,<sp/>port<sp/>+<sp/>(cvl<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="n5010-ctl_8c_1a9ceebefbea1cedb27769eb8d6a78b6fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-ctl_8c_1a9ceebefbea1cedb27769eb8d6a78b6fb" kindref="member">fpga_read_switch</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-ctl_8c_1a46c13d0ab2132699eac8a7830a536d7c" kindref="member">fpga_read_switch_port</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-ctl_8c_1a46c13d0ab2132699eac8a7830a536d7c" kindref="member">fpga_read_switch_port</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="n5010-ctl_8c_1af49d8292da513d31bb1a0a16861e230a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-ctl_8c_1af49d8292da513d31bb1a0a16861e230a" kindref="member">fpga_setread_switch</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a67f77d17592900684681c485ed981f3d" kindref="member">port</ref><sp/>==<sp/><ref refid="n5010-ctl_8c_1a6f07d0094e837d61131ab0b3aa8ab1fc" kindref="member">INVALID_PORT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>port<sp/>given\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-ctl_8c_1a6596f7a4b6b9ac8060d18e3f40f42334" kindref="member">fpga_set_switch</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-ctl_8c_1a9ceebefbea1cedb27769eb8d6a78b6fb" kindref="member">fpga_read_switch</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="n5010-ctl_8c_1aa566e69cffeabc52ffa796bd9193ab03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/><ref refid="n5010-ctl_8c_1a71f08c9d467b2c0d6627c2a19182406e" kindref="member">fpga_run</ref>(__attribute__((unused))<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Press<sp/>ctrl-c<sp/>to<sp/>stop\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="n5010-ctl_8c_1acb99505dbfaf7824f8725dff90d47ca8" kindref="member">stop</ref>)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sleep(1);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="n5010-ctl_8c_1a9bd4308d463193b0188339cb5495a58f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n5010-ctl_8c_1a9bd4308d463193b0188339cb5495a58f" kindref="member">print_usage</ref>(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/>fprintf(f,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;usage:<sp/>%s<sp/>[&lt;options&gt;]\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;options:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>--help<sp/>(-h)<sp/><sp/>print<sp/>this<sp/>help\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>--guid<sp/>(-g)<sp/><sp/>uuid<sp/>of<sp/>accelerator<sp/>to<sp/>open,<sp/>default:<sp/>%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>--mode<sp/>(-m)<sp/><sp/>test<sp/>mode<sp/>to<sp/>execute.<sp/>Known<sp/>modes:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readsw,<sp/>setsw<sp/>-p<sp/>&lt;port&gt;,<sp/>runsw\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>--debug<sp/>(-d)<sp/>enable<sp/>debug<sp/>print<sp/>of<sp/>register<sp/>values\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>[-S<sp/>&lt;segment&gt;]<sp/>[-B<sp/>&lt;bus&gt;]<sp/>[-D<sp/>&lt;device&gt;]<sp/>[-F<sp/>&lt;function&gt;]<sp/>[PCI_ADDR]\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>program_invocation_short_name,<sp/><ref refid="n5010-ctl_8c_1a514ebab49a2fb401d7d7e220a97300e5" kindref="member">default_guid</ref>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="n5010-ctl_8c_1abf670aede0d10582400b91cb54634821" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n5010-ctl_8c_1abf670aede0d10582400b91cb54634821" kindref="member">parse_port</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*port_str)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*endptr;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port<sp/>=<sp/>strtoul(port_str,<sp/>&amp;endptr,<sp/>0);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port_str<sp/>==<sp/>endptr)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>port<sp/>number:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>port_str);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port<sp/>&gt;<sp/><ref refid="n5010-ctl_8c_1a401e1a60d6381236216b6a130a6685bd" kindref="member">MAX_PORT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;port<sp/>number<sp/>too<sp/>big:<sp/>&apos;%lu&apos;\n&quot;</highlight><highlight class="normal">,<sp/>port);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a67f77d17592900684681c485ed981f3d" kindref="member">port</ref><sp/>=<sp/>port;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="n5010-ctl_8c_1a443cc7c174314015bd7fe2613c4d8245" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n5010-ctl_8c_1a443cc7c174314015bd7fe2613c4d8245" kindref="member">parse_mode</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010__test" kindref="compound">n5010_test</ref><sp/>*t;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="n5010-ctl_8c_1a0583be682de6cecd33c5d44955e5ee66" kindref="member">n5010_test</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*<ref refid="structn5010__test" kindref="compound">n5010_test</ref>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>&amp;<ref refid="structn5010__test" kindref="compound">n5010_test</ref>[i];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(t-&gt;<ref refid="structn5010__test_1a5700b8f7e0f3b2bccfb8d4ad4328a1a5" kindref="member">name</ref>,<sp/>mode)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>mode<sp/>setting:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>mode);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" kindref="member">test</ref><sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="n5010-ctl_8c_1adde1c5cf0a410d13f51b29238589fd42" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="n5010-ctl_8c_1adde1c5cf0a410d13f51b29238589fd42" kindref="member">parse_args</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>*<ref refid="structn5010" kindref="compound">n5010</ref>)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">option<sp/><ref refid="object__api_8c_1ab61f552ece35d302b110b6c2e154226f" kindref="member">options</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">,<sp/>no_argument,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;guid&quot;</highlight><highlight class="normal">,<sp/>required_argument,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;mode&quot;</highlight><highlight class="normal">,<sp/>required_argument,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">,<sp/>required_argument,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">,<sp/>no_argument,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{NULL,<sp/>0,<sp/>NULL,<sp/>0},</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1a67f77d17592900684681c485ed981f3d" kindref="member">port</ref><sp/>=<sp/><ref refid="n5010-ctl_8c_1a6f07d0094e837d61131ab0b3aa8ab1fc" kindref="member">INVALID_PORT</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>getopt_long_only(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;hg:m:p:d&quot;</highlight><highlight class="normal">,<sp/><ref refid="object__api_8c_1ab61f552ece35d302b110b6c2e154226f" kindref="member">options</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n5010-ctl_8c_1a9bd4308d463193b0188339cb5495a58f" kindref="member">print_usage</ref>(stdout);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_SUCCESS);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uuid_parse(optarg,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" kindref="member">guid</ref>)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;unparsable<sp/>uuid:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optarg);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="n5010-ctl_8c_1a443cc7c174314015bd7fe2613c4d8245" kindref="member">parse_mode</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>optarg))</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="n5010-ctl_8c_1abf670aede0d10582400b91cb54634821" kindref="member">parse_port</ref>(<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>optarg))</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae68e58f88c71441c72ecb477b69f8523" kindref="member">debug</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uuid_is_null(<ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" kindref="member">guid</ref>))<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>default<sp/>guid<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="n5010-ctl_8c_1a514ebab49a2fb401d7d7e220a97300e5" kindref="member">default_guid</ref>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uuid_parse(<ref refid="n5010-ctl_8c_1a514ebab49a2fb401d7d7e220a97300e5" kindref="member">default_guid</ref>,<sp/><ref refid="structn5010" kindref="compound">n5010</ref>-&gt;<ref refid="structn5010_1ae7ae9573b72d429d0b60811d6f6d0256" kindref="member">guid</ref>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="n5010-ctl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="n5010-ctl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structn5010" kindref="compound">n5010</ref><sp/><ref refid="structn5010" kindref="compound">n5010</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref><sp/>=<sp/>NULL,<sp/>.test<sp/>=<sp/><ref refid="n5010-ctl_8c_1a0583be682de6cecd33c5d44955e5ee66" kindref="member">n5010_test</ref>,<sp/>.debug<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6d" kindref="member">fpga_result</ref><sp/>res;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="properties_8h_1a010d3b6839fc8763e66e4f953682a489" kindref="member">fpgaGetProperties</ref>(NULL,<sp/>&amp;<ref refid="structn5010" kindref="compound">n5010</ref>.<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>properties:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8h_1a2a3fc0d8baf294d2da980ba544368b32" kindref="member">fpgaErrStr</ref>(res));</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opae_set_properties_from_args(<ref refid="structn5010" kindref="compound">n5010</ref>.<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>,<sp/>&amp;res,<sp/>&amp;argc,<sp/>argv))<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>arg<sp/>parse.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da8527745386f7cea8d8aa64f96f2249a4" kindref="member">FPGA_EXCEPTION</ref>;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error2;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>set<sp/>properties.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error2;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="n5010-ctl_8c_1adde1c5cf0a410d13f51b29238589fd42" kindref="member">parse_args</ref>(argc,<sp/>argv,<sp/>&amp;<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error2;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Install<sp/>Control-C<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/>signal(SIGINT,<sp/><ref refid="n5010-ctl_8c_1a89a8322bea357674e81ba9cbdefe0378" kindref="member">signal_callback_handler</ref>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-ctl_8c_1a8b18501a62f680f0b60aeaf03b0feaaf" kindref="member">fpga_open</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="n5010-ctl_8c_1a2e79fe0581ec5864faa636b5fe0e03a4" kindref="member">fpga_base</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-ctl_8c_1af1edf9b723cd625e1655f1f12eb21efa" kindref="member">fpga_dump</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>0,<sp/>8);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="structn5010" kindref="compound">n5010</ref>.<ref refid="structn5010_1ab54ff35470c946192ab662a1602e8da8" kindref="member">test</ref>-&gt;<ref refid="structn5010__test_1a475cef5da0662cd3a96b1e0bcbdc67c8" kindref="member">func</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref>)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-ctl_8c_1af1edf9b723cd625e1655f1f12eb21efa" kindref="member">fpga_dump</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>,<sp/>0,<sp/>8);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><ref refid="n5010-ctl_8c_1ab3d638b8387fa4ec22627ec8a6b53e62" kindref="member">fpga_close</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal">error2:</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><ref refid="properties_8h_1a6f83533f996cf6bd25274e0b7b9c3050" kindref="member">fpgaDestroyProperties</ref>(&amp;<ref refid="structn5010" kindref="compound">n5010</ref>.<ref refid="structn5010_1afcfc923993a0c3d7ed0919eae0ab8c7d" kindref="member">filter</ref>);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res<sp/>==<sp/><ref refid="types__enum_8h_1a27aaa9bd2d94c9b53602b1a7af49fc6da727cb0690aa450810ffc8f5371401327" kindref="member">FPGA_OK</ref><sp/>?<sp/>EXIT_SUCCESS<sp/>:<sp/>res;</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="samples/n5010-ctl/n5010-ctl.c"/>
  </compounddef>
</doxygen>
