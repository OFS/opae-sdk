.TH "samples/hello_events/hello_events.c" 3 "Wed Nov 22 2023" "Version -.." "OPAE C API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
samples/hello_events/hello_events.c \- A code sample of using OPAE event API\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <getopt\&.h>\fP
.br
\fC#include <poll\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <opae/fpga\&.h>\fP
.br
\fC#include <argsfilter\&.h>\fP
.br
\fC#include 'mock/opae_std\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBras_inject_error\fP"
.br
.ti -1c
.RI "union \fBras_inject_error\&.__unnamed88__\fP"
.br
.ti -1c
.RI "struct \fBras_inject_error\&.__unnamed88__\&.__unnamed90__\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBFME_SYSFS_INJECT_ERROR\fP   'errors/inject_errors'"
.br
.ti -1c
.RI "#define \fBON_ERR_GOTO\fP(res,  label,  desc)"
.br
.ti -1c
.RI "#define \fBGETOPT_STRING\fP   'hv'"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBusleep\fP (unsigned)"
.br
.ti -1c
.RI "void \fBprint_err\fP (const char *s, \fBfpga_result\fP res)"
.br
.ti -1c
.RI "\fBfpga_result\fP \fBinject_ras_fatal_error\fP (\fBfpga_token\fP fme_token, uint8_t err)"
.br
.ti -1c
.RI "void * \fBerror_thread\fP (void *arg)"
.br
.ti -1c
.RI "void \fBhelp\fP (void)"
.br
.ti -1c
.RI "\fBfpga_result\fP \fBparse_args\fP (int argc, char *argv[])"
.br
.ti -1c
.RI "\fBfpga_result\fP \fBfind_fpga\fP (\fBfpga_properties\fP device_filter, \fBfpga_token\fP *fpga, uint32_t *num_matches)"
.br
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SH "Detailed Description"
.PP 
A code sample of using OPAE event API\&. 

This sample starts two processes\&. One process injects an artificial fatal error to sysfs; while the other tries to asynchronously capture and handle the event\&. This sample code exercises all major functions of the event API, including creating and destroying event handles, register and unregister events, polling on event file descriptor, and getting the OS object associated with an event\&. For a full discussion of OPAE event API, refer to \fBevent\&.h\fP\&. 
.PP
Definition in file \fBhello_events\&.c\fP\&.
.SH "Data Structure Documentation"
.PP 
.SH "struct ras_inject_error"
.PP 
Definition at line 76 of file hello_events\&.c\&.
.PP
\fBData Fields:\fP
.RS 4
union \fBras_inject_error\fP \fI__unnamed__\fP 
.br
.PP
.RE
.PP
.SH "union ras_inject_error\&.__unnamed88__"
.PP 
Definition at line 77 of file hello_events\&.c\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIcsr\fP 
.br
.PP
\fB__unnamed88__\fP \fI__unnamed__\fP 
.br
.PP
.RE
.PP
.SH "struct ras_inject_error\&.__unnamed88__\&.__unnamed90__"
.PP 
Definition at line 79 of file hello_events\&.c\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIcatastrophicr_error: 1\fP 
.br
.PP
uint64_t \fIfatal_error: 1\fP 
.br
.PP
uint64_t \fInonfatal_error: 1\fP 
.br
.PP
uint64_t \fIrsvd: 61\fP 
.br
.PP
.RE
.PP
.SH "Macro Definition Documentation"
.PP 
.SS "#define FME_SYSFS_INJECT_ERROR   'errors/inject_errors'"

.PP
Definition at line 60 of file hello_events\&.c\&.
.SS "#define ON_ERR_GOTO(res, label, desc)"
\fBValue:\fP
.PP
.nf
 do {                                       \
      if ((res) != FPGA_OK) {            \
         print_err((desc), (res));  \
         goto label;                \
      }                                  \
   } while (0)
.fi
.PP
Definition at line 62 of file hello_events\&.c\&.
.SS "#define GETOPT_STRING   'hv'"

.PP
Definition at line 164 of file hello_events\&.c\&.
.SH "Function Documentation"
.PP 
.SS "int usleep (unsigned)"

.PP
Referenced by error_thread()\&.
.SS "void print_err (const char * s, \fBfpga_result\fP res)"

.PP
Definition at line 70 of file hello_events\&.c\&.
.PP
References fpgaErrStr()\&.
.PP
Referenced by error_thread(), and main()\&.
.SS "\fBfpga_result\fP inject_ras_fatal_error (\fBfpga_token\fP fme_token, uint8_t err)"

.PP
Definition at line 92 of file hello_events\&.c\&.
.PP
References FME_SYSFS_INJECT_ERROR, FPGA_OK, FPGA_OPEN_SHARED, fpgaClose(), fpgaDestroyObject(), fpgaHandleGetObject(), fpgaObjectWrite64(), fpgaOpen(), ON_ERR_GOTO, and OPAE_ERR\&.
.PP
Referenced by error_thread()\&.
.SS "void* error_thread (void * arg)"

.PP
Definition at line 127 of file hello_events\&.c\&.
.PP
References FPGA_OK, inject_ras_fatal_error(), print_err(), and usleep()\&.
.PP
Referenced by main()\&.
.SS "void help (void)"

.PP
Definition at line 147 of file hello_events\&.c\&.
.PP
Referenced by parse_args()\&.
.SS "\fBfpga_result\fP parse_args (int argc, char * argv[])"

.PP
Definition at line 165 of file hello_events\&.c\&.
.PP
References FPGA_EXCEPTION, FPGA_OK, GETOPT_STRING, and help()\&.
.PP
Referenced by main()\&.
.SS "\fBfpga_result\fP find_fpga (\fBfpga_properties\fP device_filter, \fBfpga_token\fP * fpga, uint32_t * num_matches)"

.PP
Definition at line 204 of file hello_events\&.c\&.
.PP
References FPGA_DEVICE, FPGA_OK, fpgaCloneProperties(), fpgaDestroyProperties(), fpgaEnumerate(), fpgaPropertiesSetObjectType(), and ON_ERR_GOTO\&.
.PP
Referenced by main()\&.
.SS "int main (int argc, char * argv[])"

.PP
Definition at line 228 of file hello_events\&.c\&.
.PP
References error_thread(), find_fpga(), FPGA_EVENT_ERROR, FPGA_EXCEPTION, FPGA_NOT_FOUND, FPGA_OK, FPGA_OPEN_SHARED, fpgaClose(), fpgaCreateEventHandle(), fpgaDestroyEventHandle(), fpgaDestroyProperties(), fpgaDestroyToken(), fpgaGetOSObjectFromEventHandle(), fpgaGetProperties(), fpgaOpen(), fpgaRegisterEvent(), fpgaUnregisterEvent(), ON_ERR_GOTO, parse_args(), and print_err()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for OPAE C API from the source code\&.
