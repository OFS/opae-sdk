.TH "include/opae/uio.h" 3 "Wed Nov 22 2023" "Version -.." "OPAE C API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/opae/uio.h \- APIs to manage a PCIe device via UIO\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBopae_uio_device_region\fP"
.br
.ti -1c
.RI "struct \fBopae_uio\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBOPAE_UIO_PATH_MAX\fP   256"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBopae_uio_open\fP (struct \fBopae_uio\fP *u, const char *dfl_device)"
.br
.ti -1c
.RI "int \fBopae_uio_region_get\fP (struct \fBopae_uio\fP *u, uint32_t index, uint8_t **ptr, size_t *size)"
.br
.ti -1c
.RI "void \fBopae_uio_close\fP (struct \fBopae_uio\fP *u)"
.br
.in -1c
.SH "Detailed Description"
.PP 
APIs to manage a PCIe device via UIO\&. 

Presents a simple interface for interacting with a DFL device that is bound to its UIO driver\&. See https://kernel.org/doc/html/v4.14/driver-api/uio-howto.html for a description of UIO\&.
.PP
Provides APIs for opening/closing the device and for querying info about the MMIO regions of the device\&. 
.PP
Definition in file \fBuio\&.h\fP\&.
.SH "Data Structure Documentation"
.PP 
.SH "struct opae_uio_device_region"
.PP 
MMIO region info
.PP
Describes a range of mappable MMIO\&. 
.PP
Definition at line 53 of file uio\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint32_t \fIregion_index\fP 
.br
.PP
uint8_t * \fIregion_ptr\fP 
.br
.PP
size_t \fIregion_page_offset\fP 
.br
.PP
size_t \fIregion_size\fP 
.br
.PP
struct \fBopae_uio_device_region\fP * \fInext\fP 
.br
.PP
.RE
.PP
.SH "struct opae_uio"
.PP 
OPAE UIO device abstraction
.PP
This structure is used to interact with the OPAE UIO API\&. Each UIO device has a file descriptor that is used to mmap its regions into user address space\&. Each device also has one or more MMIO regions\&. 
.PP
Definition at line 68 of file uio\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
char \fIdevice_path[256]\fP 
.br
.PP
int \fIdevice_fd\fP 
.br
.PP
struct \fBopae_uio_device_region\fP * \fIregions\fP 
.br
.PP
.RE
.PP
.SH "Macro Definition Documentation"
.PP 
.SS "#define OPAE_UIO_PATH_MAX   256"

.PP
Definition at line 46 of file uio\&.h\&.
.SH "Function Documentation"
.PP 
.SS "int opae_uio_open (struct \fBopae_uio\fP * u, const char * dfl_device)"
Open and populate a UIO device
.PP
Opens the Device Feature List device corresponding to the device name given in dfl_device, eg 'dfl_dev\&.10'\&. The device must be bound to the dfl-uio-pdev driver prior to opening it\&. The data structures corresponding to the MMIO regions are initialized\&.
.PP
\fBParameters\fP
.RS 4
\fIu\fP Storage for the device\&. May be stack-resident\&. 
.br
\fIdfl_device\fP The name of the desired DFL device\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Non-zero on error\&. Zero on success\&.
.RE
.PP
Example 
.PP
.nf
$ sudo opaeuio -i -u lab -g lab dfl_dev\&.10

.fi
.PP
.PP
Example 
.PP
.nf
struct opae_uio u;

if (opae_uio_open(&u, "dfl_dev\&.10")) {
  // handle error
}

.fi
.PP
 
.PP
Referenced by hssi_cmd::set_pkt_filt_dest()\&.
.SS "int opae_uio_region_get (struct \fBopae_uio\fP * u, uint32_t index, uint8_t ** ptr, size_t * size)"
Query device MMIO region
.PP
Retrieves info describing the MMIO region with the given region index\&. The device structure u must have been previously opened by a call to opae_uio_open\&.
.PP
\fBParameters\fP
.RS 4
\fIu\fP The open OPAE UIO device\&. 
.br
\fIindex\fP The zero-based index of the desired MMIO region\&. 
.br
\fIptr\fP Optional pointer to receive the virtual address for the region\&. Pass NULL to ignore\&. 
.br
\fIsize\fP Optional pointer to receive the size of the MMIO region\&. Pass NULL to ignore\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Non-zero on error (including index out-of-range)\&. Zero on success\&.
.RE
.PP
Example 
.PP
.nf
struct opae_uio u;

uint8_t *virt = NULL;
size_t size = 0;

if (opae_uio_open(&u, "dfl_dev\&.10")) {
  // handle error
} else {
  opae_uio_region_get(&u, 0, &virt, &size);
}

.fi
.PP
 
.PP
Referenced by hssi_cmd::set_pkt_filt_dest()\&.
.SS "void opae_uio_close (struct \fBopae_uio\fP * u)"
Release and close a UIO device
.PP
The given device pointer must have been previously initialized by opae_uio_open\&. Releases all data structures\&.
.PP
\fBParameters\fP
.RS 4
\fIu\fP Storage for the device info\&. May be stack-resident\&.
.RE
.PP
Example 
.PP
.nf
struct opae_uio u;

if (opae_uio_open(&u, "dfl_dev\&.10")) {
  // handle error
} else {
  // interact with the device
  \&.\&.\&.
  // free the device
  opae_uio_close(&u);
}

.fi
.PP
.PP
Example 
.PP
.nf
$ sudo opaeuio -r dfl_dev\&.10

.fi
.PP
 
.PP
Referenced by hssi_cmd::set_pkt_filt_dest()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for OPAE C API from the source code\&.
