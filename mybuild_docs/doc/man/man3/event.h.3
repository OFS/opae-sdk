.TH "include/opae/event.h" 3 "Wed Nov 22 2023" "Version -.." "OPAE C API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/opae/event.h \- Functions for registering events and managing the lifecycle for \fCfpga_event_handle\fPs\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <opae/types\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBfpga_result\fP \fBfpgaCreateEventHandle\fP (\fBfpga_event_handle\fP *event_handle)"
.br
.ti -1c
.RI "\fBfpga_result\fP \fBfpgaDestroyEventHandle\fP (\fBfpga_event_handle\fP *event_handle)"
.br
.ti -1c
.RI "\fBfpga_result\fP \fBfpgaGetOSObjectFromEventHandle\fP (const \fBfpga_event_handle\fP eh, int *fd)"
.br
.ti -1c
.RI "\fBfpga_result\fP \fBfpgaRegisterEvent\fP (\fBfpga_handle\fP handle, \fBfpga_event_type\fP event_type, \fBfpga_event_handle\fP event_handle, uint32_t flags)"
.br
.ti -1c
.RI "\fBfpga_result\fP \fBfpgaUnregisterEvent\fP (\fBfpga_handle\fP handle, \fBfpga_event_type\fP event_type, \fBfpga_event_handle\fP event_handle)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Functions for registering events and managing the lifecycle for \fCfpga_event_handle\fPs\&. 

OPAE provides an interface to asynchronous events that can be generated by different FPGA resources\&. The event API provides functions to register for these events; associated with every event a process has registered for is an fpga_event_handle, which encapsulates the OS-specific data structure for event objects\&. On Linux, an fpga_event_handle can be used as a file descriptor and passed to select(), poll(), epoll() and similar functions to wait for asynchronous events\&. 
.PP
Definition in file \fBevent\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBfpga_result\fP fpgaCreateEventHandle (\fBfpga_event_handle\fP * event_handle)"
Initialize an event_handle
.PP
Platform independent way to initialize an event_handle used for notifications from the driver to application\&. For Linux, this function creates an eventfd and returns the eventfd file descriptor in \fC*event_handle\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIevent_handle\fP Pointer to event handle variable\&.
.RE
.PP
\fBReturns\fP
.RS 4
FPGA_OK on success\&. FPGA_INVALID_PARAM if \fCevent_handle\fP is NULL\&. FPGA_NOT_SUPPORTED if platform does not support events\&. 
.RE
.PP

.PP
Referenced by main()\&.
.SS "\fBfpga_result\fP fpgaDestroyEventHandle (\fBfpga_event_handle\fP * event_handle)"
Destroy an event_handle
.PP
Destroy handle and free resources\&. On Linux this corresponds to closing the file descriptor pointed to by handle
.PP
\fBNote\fP
.RS 4
\fBfpgaDestroyEventHandle()\fP requires the address of an event_handle as created by \fBfpgaCreateEventHandle()\fP\&. Passing any other value results in undefined behavior\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIevent_handle\fP Pointer to handle to be destroyed
.RE
.PP
\fBReturns\fP
.RS 4
FPGA_OK on success\&. FPGA_INVALID_PARAM if \fCevent_handle\fP is NULL\&. 
.RE
.PP

.PP
Referenced by main()\&.
.SS "\fBfpga_result\fP fpgaGetOSObjectFromEventHandle (const \fBfpga_event_handle\fP eh, int * fd)"
Get OS object from event handle
.PP
Check validity of event handle, and get the OS object used to subscribe and unsubscribe to events\&. On Linux, the object corresponds to a file descriptor\&.
.PP
\fBParameters\fP
.RS 4
\fIeh\fP Event handle to get the descriptor value from 
.br
\fIfd\fP integer to store the descriptor value
.RE
.PP
\fBReturns\fP
.RS 4
FPGA_OK on success\&. FPGA_INVALID_PARAM if \fCevent_handle\fP is invalid\&. 
.RE
.PP

.PP
Referenced by main()\&.
.SS "\fBfpga_result\fP fpgaRegisterEvent (\fBfpga_handle\fP handle, \fBfpga_event_type\fP event_type, \fBfpga_event_handle\fP event_handle, uint32_t flags)"
Register an FPGA event
.PP
This function tells the driver that the caller is interested in notification for the event specified by the type and flags pair\&.
.PP
The event_handle points to an OS specific mechanism for event notification\&. An event_handle is associated with only a single event\&.
.PP
In case of user interrupts, the flags parameter will be used to specify the vector ID\&. The value of the flags parameter indicates the vector ID, no bit encoding is used\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP Handle to previously opened FPGA resource\&. 
.br
\fIevent_type\fP Type of event 
.br
\fIevent_handle\fP Handle to previously opened resource for event notification\&. 
.br
\fIflags\fP Optional argument for specifying additional information about event\&. For example irq number for interrupt events\&. 
.RE
.PP
\fBReturns\fP
.RS 4
FPGA_OK on success\&. FPGA_INVALID_PARAM if handle does not refer to a resource supporting the requested event, or if event_handle is not valid\&. FPGA_EXCEPTION if an internal exception occurred while accessing the handle or the event_handle\&. On Linux: FPGA_NO_DAEMON if the driver does not support the requested event and there is no FPGA Daemon (fpgad) running to proxy it\&. 
.RE
.PP

.PP
Referenced by main()\&.
.SS "\fBfpga_result\fP fpgaUnregisterEvent (\fBfpga_handle\fP handle, \fBfpga_event_type\fP event_type, \fBfpga_event_handle\fP event_handle)"
Unregister an FPGA event
.PP
This function tells the driver that the caller is no longer interested in notification for the event associated with the event_handle
.PP
The event_handle points to an OS specific mechanism for event notification\&. An event_handle is associated with only a single event\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP Handle to previously opened FPGA resource\&. 
.br
\fIevent_type\fP Type of event to unregister\&. 
.br
\fIevent_handle\fP Handle to previously registered resource for event notification\&. 
.RE
.PP
\fBReturns\fP
.RS 4
FPGA_OK on success\&. FPGA_INVALID_PARAM if handle does not refer to a resource supporting the requested event, or if event_handle is not valid\&. FPGA_EXCEPTION if an internal error occurred accessing the handle or the event_handle\&. 
.RE
.PP

.PP
Referenced by main()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for OPAE C API from the source code\&.
