.TH "host_exerciser" 3 "Wed Nov 22 2023" "Version -.." "OPAE C API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
host_exerciser
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "class \fBhe_cache_cmd\fP"
.br
.ti -1c
.RI "class \fBhe_cache_lpbk_cmd\fP"
.br
.ti -1c
.RI "class \fBhe_cmd\fP"
.br
.ti -1c
.RI "union \fBhe_dfh\fP"
.br
.ti -1c
.RI "union \fBhe_dsm_base\fP"
.br
.ti -1c
.RI "union \fBhe_ctl\fP"
.br
.ti -1c
.RI "union \fBhe_info\fP"
.br
.ti -1c
.RI "union \fBhe_wr_num_lines\fP"
.br
.ti -1c
.RI "union \fBhe_wr_byte_enable\fP"
.br
.ti -1c
.RI "union \fBhe_wr_config\fP"
.br
.ti -1c
.RI "union \fBhe_wr_addr_table_ctrl\fP"
.br
.ti -1c
.RI "union \fBhe_wr_addr_table_data\fP"
.br
.ti -1c
.RI "union \fBhe_rd_num_lines\fP"
.br
.ti -1c
.RI "union \fBhe_rd_config\fP"
.br
.ti -1c
.RI "union \fBhe_rd_addr_table_ctrl\fP"
.br
.ti -1c
.RI "union \fBhe_rd_addr_table_data\fP"
.br
.ti -1c
.RI "union \fBhe_err_status\fP"
.br
.ti -1c
.RI "struct \fBhe_cache_dsm_status\fP"
.br
.ti -1c
.RI "class \fBhost_exerciser\fP"
.br
.ti -1c
.RI "union \fBhe_dsm_basel\fP"
.br
.ti -1c
.RI "union \fBhe_dsm_baseh\fP"
.br
.ti -1c
.RI "union \fBhe_num_lines\fP"
.br
.ti -1c
.RI "union \fBhe_cfg\fP"
.br
.ti -1c
.RI "union \fBhe_inact_thresh\fP"
.br
.ti -1c
.RI "union \fBhe_interrupt0\fP"
.br
.ti -1c
.RI "union \fBhe_swtest_msg\fP"
.br
.ti -1c
.RI "union \fBhe_status0\fP"
.br
.ti -1c
.RI "union \fBhe_status1\fP"
.br
.ti -1c
.RI "union \fBhe_error\fP"
.br
.ti -1c
.RI "union \fBhe_stride\fP"
.br
.ti -1c
.RI "struct \fBhe_dsm_status\fP"
.br
.ti -1c
.RI "struct \fBMapKeyComparator\fP"
.br
.ti -1c
.RI "class \fBhost_exerciser_cmd\fP"
.br
.ti -1c
.RI "class \fBhost_exerciser_lpbk\fP"
.br
.ti -1c
.RI "class \fBhost_exerciser_mem\fP"
.br
.ti -1c
.RI "struct \fBhe_dfh\&.__unnamed3__\fP"
.br
.ti -1c
.RI "struct \fBhe_dfh\&.__unnamed94__\fP"
.br
.ti -1c
.RI "struct \fBhe_dsm_base\&.__unnamed6__\fP"
.br
.ti -1c
.RI "struct \fBhe_ctl\&.__unnamed9__\fP"
.br
.ti -1c
.RI "struct \fBhe_ctl\&.__unnamed106__\fP"
.br
.ti -1c
.RI "struct \fBhe_info\&.__unnamed12__\fP"
.br
.ti -1c
.RI "struct \fBhe_wr_num_lines\&.__unnamed15__\fP"
.br
.ti -1c
.RI "struct \fBhe_wr_byte_enable\&.__unnamed18__\fP"
.br
.ti -1c
.RI "struct \fBhe_wr_config\&.__unnamed21__\fP"
.br
.ti -1c
.RI "struct \fBhe_wr_addr_table_ctrl\&.__unnamed24__\fP"
.br
.ti -1c
.RI "struct \fBhe_wr_addr_table_data\&.__unnamed27__\fP"
.br
.ti -1c
.RI "struct \fBhe_rd_num_lines\&.__unnamed30__\fP"
.br
.ti -1c
.RI "struct \fBhe_rd_config\&.__unnamed33__\fP"
.br
.ti -1c
.RI "struct \fBhe_rd_addr_table_ctrl\&.__unnamed36__\fP"
.br
.ti -1c
.RI "struct \fBhe_rd_addr_table_data\&.__unnamed39__\fP"
.br
.ti -1c
.RI "struct \fBhe_err_status\&.__unnamed42__\fP"
.br
.ti -1c
.RI "struct \fBhe_dsm_basel\&.__unnamed97__\fP"
.br
.ti -1c
.RI "struct \fBhe_dsm_baseh\&.__unnamed100__\fP"
.br
.ti -1c
.RI "struct \fBhe_num_lines\&.__unnamed103__\fP"
.br
.ti -1c
.RI "struct \fBhe_cfg\&.__unnamed109__\fP"
.br
.ti -1c
.RI "struct \fBhe_inact_thresh\&.__unnamed112__\fP"
.br
.ti -1c
.RI "struct \fBhe_interrupt0\&.__unnamed115__\fP"
.br
.ti -1c
.RI "struct \fBhe_swtest_msg\&.__unnamed118__\fP"
.br
.ti -1c
.RI "struct \fBhe_status0\&.__unnamed121__\fP"
.br
.ti -1c
.RI "struct \fBhe_status1\&.__unnamed124__\fP"
.br
.ti -1c
.RI "struct \fBhe_error\&.__unnamed127__\fP"
.br
.ti -1c
.RI "struct \fBhe_stride\&.__unnamed130__\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBtest_afu\fP = \fBopae::afu_test::afu\fP"
.br
.ti -1c
.RI "using \fBtest_command\fP = \fBopae::afu_test::command\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBHE_DFH\fP = 0x0000, \fBHE_ID_L\fP = 0x0008, \fBHE_ID_H\fP = 0x0010, \fBHE_DFH_RSVD0\fP = 0x0018, \fBHE_DFH_RSVD1\fP = 0x0020, \fBHE_SCRATCHPAD0\fP = 0x028, \fBHE_DSM_BASE\fP = 0x030, \fBHE_CTL\fP = 0x038, \fBHE_INFO\fP = 0x040, \fBHE_WR_NUM_LINES\fP = 0x048, \fBHE_WR_BYTE_ENABLE\fP = 0x050, \fBHE_WR_CONFIG\fP = 0x058, \fBHE_WR_ADDR_TABLE_CTRL\fP = 0x060, \fBHE_WR_ADDR_TABLE_DATA\fP = 0x068, \fBHE_RD_NUM_LINES\fP = 0x070, \fBHE_RD_CONFIG\fP = 0x078, \fBHE_RD_ADDR_TABLE_CTRL\fP = 0x080, \fBHE_RD_ADDR_TABLE_DATA\fP = 0x088, \fBHE_ERROR_STATUS\fP = 0x090, \fBHE_ERROR_EXP_DATA\fP = 0x098, \fBHE_ERROR_ACT_DATA0\fP = 0x0A0, \fBHE_ERROR_ACT_DATA1\fP = 0x0A8, \fBHE_ERROR_ACT_DATA2\fP = 0x0B0, \fBHE_ERROR_ACT_DATA3\fP = 0x0B8, \fBHE_ERROR_ACT_DATA4\fP = 0x0C0, \fBHE_ERROR_ACT_DATA5\fP = 0x0C8, \fBHE_ERROR_ACT_DATA6\fP = 0x0D0, \fBHE_ERROR_ACT_DATA7\fP = 0x0D8 }"
.br
.ti -1c
.RI "enum \fBhe_rd_opcode\fP { \fBRD_LINE_I\fP = 0x0, \fBRD_LINE_S\fP = 0x1, \fBRD_LINE_EM\fP = 0x2 }"
.br
.ti -1c
.RI "enum \fBhe_wr_opcode\fP { \fBWR_LINE_I\fP = 0x0, \fBWR_LINE_M\fP = 0x1, \fBWR_PUSH_I\fP = 0x2, \fBWR_BARRIER_FRNCE\fP = 0x3, \fBWR_FLUSH_CL\fP = 0x4, \fBWR_FLUSH_CL_HCOH\fP = 0x5, \fBWR_FLUSH_CL_DCOH\fP = 0x6 }"
.br
.ti -1c
.RI "enum \fBhe_test_mode\fP { \fBHE_FPGA_RD_CACHE_HIT\fP = 0x0, \fBHE_FPGA_WR_CACHE_HIT\fP = 0x1, \fBHE_FPGA_RD_CACHE_MISS\fP = 0x2, \fBHE_FPGA_WR_CACHE_MISS\fP = 0x3, \fBHE_HOST_RD_CACHE_HIT\fP = 0x4, \fBHE_HOST_WR_CACHE_HIT\fP = 0x5, \fBHE_HOST_RD_CACHE_MISS\fP = 0x6, \fBHE_HOST_WR_CACHE_MISS\fP = 0x7 }"
.br
.ti -1c
.RI "enum \fBhe_target\fP { \fBHE_TARGET_HOST\fP = 0x0, \fBHE_TARGET_FPGA\fP = 0x1 }"
.br
.ti -1c
.RI "enum \fBhe_cxl_latency\fP { \fBHE_CXL_LATENCY_NONE\fP = 0x0, \fBHE_CXL_RD_LATENCY\fP = 0x1, \fBHE_CXL_WR_LATENCY\fP = 0x2, \fBHE_CXL_RD_WR_LATENCY\fP = 0x3 }"
.br
.ti -1c
.RI "enum \fBhe_bisa_support\fP { \fBHOSTMEM_BIAS\fP = 0x0, \fBHOST_BIAS_NA\fP = 0x1, \fBFPGAMEM_HOST_BIAS\fP = 0x2, \fBFPGAMEM_DEVICE_BIAS\fP = 0x3 }"
.br
.ti -1c
.RI "enum \fBhe_cxl_dev\fP { \fBHE_CXL_DEVICE0\fP = 0x0, \fBHE_CXL_DEVICE1\fP = 0x1 }"
.br
.ti -1c
.RI "enum \fBhe_addrtable_size\fP { \fBHE_ADDRTABLE_SIZE4096\fP = 0xC, \fBHE_ADDRTABLE_SIZE2048\fP = 0xB, \fBHE_ADDRTABLE_SIZE1024\fP = 0xA, \fBHE_ADDRTABLE_SIZE512\fP = 0x9, \fBHE_ADDRTABLE_SIZE256\fP = 0x8, \fBHE_ADDRTABLE_SIZE128\fP = 0x7, \fBHE_ADDRTABLE_SIZE64\fP = 0x6, \fBHE_ADDRTABLE_SIZE32\fP = 0x5, \fBHE_ADDRTABLE_SIZE16\fP = 0x4, \fBHE_ADDRTABLE_SIZE8\fP = 0x3, \fBHE_ADDRTABLE_SIZE4\fP = 0x2, \fBHE_ADDRTABLE_SIZE2\fP = 0x1 }"
.br
.ti -1c
.RI "enum \fBhe_traffic_enable\fP { \fBHE_ENABLE_TRAFFIC_STAGE\fP = 0x0, \fBHE_SIP_SEQ_STAGE\fP = 0x1 }"
.br
.ti -1c
.RI "enum { \fBHE_DFH\fP = 0x0000, \fBHE_ID_L\fP = 0x0008, \fBHE_ID_H\fP = 0x0010, \fBHE_DFH_RSVD0\fP = 0x0018, \fBHE_DFH_RSVD1\fP = 0x0020, \fBHE_SCRATCHPAD0\fP = 0x028, \fBHE_SCRATCHPAD1\fP = 0x0104, \fBHE_SCRATCHPAD2\fP = 0x0108, \fBHE_DSM_BASEL\fP = 0x0110, \fBHE_DSM_BASEH\fP = 0x0114, \fBHE_SRC_ADDR\fP = 0x0120, \fBHE_DST_ADDR\fP = 0x0128, \fBHE_NUM_LINES\fP = 0x0130, \fBHE_CTL\fP = 0x038, \fBHE_CFG\fP = 0x0140, \fBHE_INACT_THRESH\fP = 0x0148, \fBHE_INTERRUPT0\fP = 0x0150, \fBHE_SWTEST_MSG\fP = 0x0158, \fBHE_STATUS0\fP = 0x0160, \fBHE_STATUS1\fP = 0x0168, \fBHE_ERROR\fP = 0x0170, \fBHE_STRIDE\fP = 0x0178, \fBHE_INFO0\fP = 0x0180 }"
.br
.ti -1c
.RI "enum \fBhost_exe_mode\fP { \fBHOST_EXEMODE_LPBK1\fP = 0x0, \fBHOST_EXEMODE_READ\fP = 0x1, \fBHOST_EXEMODE_WRITE\fP = 0x2, \fBHOST_EXEMODE_TRPUT\fP = 0x3 }"
.br
.ti -1c
.RI "enum \fBhostexe_req_len\fP { \fBHOSTEXE_CLS_1\fP = 0x0, \fBHOSTEXE_CLS_2\fP = 0x1, \fBHOSTEXE_CLS_4\fP = 0x2, \fBHOSTEXE_CLS_8\fP = 0x3, \fBHOSTEXE_CLS_16\fP = 0x4 }"
.br
.ti -1c
.RI "enum \fBhostexe_atomic_func\fP { \fBHOSTEXE_ATOMIC_OFF\fP = 0, \fBHOSTEXE_ATOMIC_FADD_4\fP = 0x1, \fBHOSTEXE_ATOMIC_FADD_8\fP = 0x3, \fBHOSTEXE_ATOMIC_SWAP_4\fP = 0x5, \fBHOSTEXE_ATOMIC_SWAP_8\fP = 0x7, \fBHOSTEXE_ATOMIC_CAS_4\fP = 0x9, \fBHOSTEXE_ATOMIC_CAS_8\fP = 0xb }"
.br
.ti -1c
.RI "enum \fBhostexe_encoding\fP { \fBHOSTEXE_ENCODING_DEFAULT\fP = 0x0, \fBHOSTEXE_ENCODING_DM\fP = 0x1, \fBHOSTEXE_ENCODING_PU\fP = 0x2, \fBHOSTEXE_ENCODING_RANDOM\fP = 0x3 }"
.br
.ti -1c
.RI "enum \fBhostexe_test_mode\fP { \fBHOSTEXE_TEST_ROLLOVER\fP = 0x0, \fBHOSTEXE_TEST_TERMINATION\fP = 0x1 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBhe_cache_thread\fP (uint8_t *buf_ptr, uint64_t len)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const uint64_t \fBHELPBK_TEST_TIMEOUT\fP = 30000"
.br
.ti -1c
.RI "static const uint64_t \fBHELPBK_TEST_SLEEP_INVL\fP = 100"
.br
.ti -1c
.RI "static const uint64_t \fBCL\fP = 64"
.br
.ti -1c
.RI "static const uint64_t \fBKB\fP = 1024"
.br
.ti -1c
.RI "static const uint64_t \fBMB\fP = \fBKB\fP * 1024"
.br
.ti -1c
.RI "static const uint64_t \fBBUFFER_SIZE_2MB\fP = 2 * \fBMB\fP"
.br
.ti -1c
.RI "static const uint64_t \fBBUFFER_SIZE_32KB\fP = 32* \fBKB\fP"
.br
.ti -1c
.RI "static const uint64_t \fBFPGA_32KB_CACHE_LINES\fP = (32 * \fBKB\fP) / 64"
.br
.ti -1c
.RI "static const uint64_t \fBFPGA_2MB_CACHE_LINES\fP = (2 * \fBMB\fP) / 64"
.br
.ti -1c
.RI "static const uint64_t \fBFPGA_512CACHE_LINES\fP = 512"
.br
.ti -1c
.RI "static const double \fBLATENCY_FACTOR\fP = 2\&.5"
.br
.ti -1c
.RI "const std::map< std::string, uint32_t > \fBhe_test_modes\fP"
.br
.ti -1c
.RI "const std::map< std::string, uint32_t > \fBhe_targets\fP"
.br
.ti -1c
.RI "const std::map< std::string, uint32_t > \fBhe_bias\fP"
.br
.ti -1c
.RI "const std::map< std::string, uint32_t > \fBhe_cxl_device\fP"
.br
.ti -1c
.RI "const std::map< std::string, uint32_t > \fBtraffic_enable\fP"
.br
.ti -1c
.RI "std::map< uint32_t, uint32_t > \fBaddrtable_size\fP"
.br
.ti -1c
.RI "static const uint64_t \fBHELPBK_TEST_TIMEOUT\fP = 30000"
.br
.ti -1c
.RI "static const uint64_t \fBHELPBK_TEST_SLEEP_INVL\fP = 100"
.br
.ti -1c
.RI "static const uint64_t \fBCL\fP = 64"
.br
.ti -1c
.RI "static const uint64_t \fBKB\fP = 1024"
.br
.ti -1c
.RI "static const uint64_t \fBMB\fP = \fBKB\fP * 1024"
.br
.ti -1c
.RI "static const uint64_t \fBLOG2_CL\fP = 6"
.br
.ti -1c
.RI "static const size_t \fBLPBK1_DSM_SIZE\fP = 2 * \fBKB\fP"
.br
.ti -1c
.RI "static const size_t \fBLPBK1_BUFFER_SIZE\fP = 64 * \fBKB\fP"
.br
.ti -1c
.RI "static const size_t \fBLPBK1_BUFFER_ALLOCATION_SIZE\fP = 64 * \fBKB\fP"
.br
.ti -1c
.RI "const std::map< std::string, uint32_t > \fBhe_modes\fP"
.br
.ti -1c
.RI "const std::map< std::string, uint32_t, \fBMapKeyComparator\fP > \fBhe_req_cls_len\fP"
.br
.ti -1c
.RI "const std::map< std::string, uint32_t > \fBhe_req_atomic_func\fP"
.br
.ti -1c
.RI "const std::map< std::string, uint32_t > \fBhe_req_encoding\fP"
.br
.ti -1c
.RI "const std::map< std::string, uint32_t > \fBhe_test_mode\fP"
.br
.ti -1c
.RI "const char * \fBinterleave_help\fP"
.br
.in -1c
.SH "Data Structure Documentation"
.PP 
.SH "struct host_exerciser::he_cache_dsm_status"
.PP 
Definition at line 266 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint32_t \fItest_completed: 1\fP 
.br
.PP
uint32_t \fIdsm_number: 15\fP 
.br
.PP
uint32_t \fIres1: 16\fP 
.br
.PP
uint32_t \fIerr_vector: 32\fP 
.br
.PP
uint64_t \fInum_ticks: 64\fP 
.br
.PP
uint32_t \fInum_reads: 32\fP 
.br
.PP
uint32_t \fInum_writes: 32\fP 
.br
.PP
uint32_t \fIpenalty_start: 32\fP 
.br
.PP
uint32_t \fIpenalty_end: 32\fP 
.br
.PP
uint32_t \fIactual_data: 32\fP 
.br
.PP
uint32_t \fIexpected_data: 32\fP 
.br
.PP
uint32_t \fIres5[2]\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_dsm_status"
.PP 
Definition at line 296 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fItest_completed: 1\fP 
.br
.PP
uint64_t \fIdsm_number: 15\fP 
.br
.PP
uint64_t \fIres1: 16\fP 
.br
.PP
uint64_t \fIerr_vector: 32\fP 
.br
.PP
uint64_t \fInum_ticks: 40\fP 
.br
.PP
uint64_t \fIres2: 8\fP 
.br
.PP
uint64_t \fInum_reads_h: 8\fP 
.br
.PP
uint64_t \fInum_writes_h: 8\fP 
.br
.PP
uint64_t \fInum_reads_l: 32\fP 
.br
.PP
uint64_t \fInum_writes_l: 32\fP 
.br
.PP
uint64_t \fIpenalty_start: 16\fP 
.br
.PP
uint64_t \fIres3: 16\fP 
.br
.PP
uint64_t \fIpenalty_end: 8\fP 
.br
.PP
uint64_t \fIres4: 24\fP 
.br
.PP
uint64_t \fIab_error_info: 32\fP 
.br
.PP
uint32_t \fIres5[7]\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_dfh\&.__unnamed3__"
.PP 
Definition at line 103 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fICcipVersionNumber: 12\fP 
.br
.PP
uint64_t \fIAfuMajVersion: 4\fP 
.br
.PP
uint64_t \fINextDfhOffset: 24\fP 
.br
.PP
uint64_t \fIEOL: 1\fP 
.br
.PP
uint64_t \fIReserved: 19\fP 
.br
.PP
uint64_t \fIFeatureType: 4\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_dfh\&.__unnamed94__"
.PP 
Definition at line 127 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint16_t \fICcipVersionNumber: 12\fP 
.br
.PP
uint8_t \fIAfuMajVersion: 4\fP 
.br
.PP
uint32_t \fINextDfhOffset: 24\fP 
.br
.PP
uint8_t \fIEOL: 1\fP 
.br
.PP
uint32_t \fIReserved: 19\fP 
.br
.PP
uint8_t \fIFeatureType: 4\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_dsm_base\&.__unnamed6__"
.PP 
Definition at line 117 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIDsmBase: 64\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_ctl\&.__unnamed9__"
.PP 
Definition at line 126 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIResetL: 1\fP 
.br
.PP
uint64_t \fIStart: 1\fP 
.br
.PP
uint64_t \fIForcedTestCmpl: 1\fP 
.br
.PP
uint64_t \fIbias_support: 2\fP 
.br
.PP
uint64_t \fIReserved: 59\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_ctl\&.__unnamed106__"
.PP 
Definition at line 179 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint32_t \fIResetL: 1\fP 
.br
.PP
uint32_t \fIStart: 1\fP 
.br
.PP
uint32_t \fIForcedTestCmpl: 1\fP 
.br
.PP
uint32_t \fIReserved: 29\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_info\&.__unnamed12__"
.PP 
Definition at line 139 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIwrite_addr_table_size: 4\fP 
.br
.PP
uint64_t \fIread_addr_table_size: 4\fP 
.br
.PP
uint64_t \fIReserved: 56\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_wr_num_lines\&.__unnamed15__"
.PP 
Definition at line 150 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIwrite_num_lines: 16\fP 
.br
.PP
uint64_t \fIreserved: 48\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_wr_byte_enable\&.__unnamed18__"
.PP 
Definition at line 160 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIwrite_byte_enable: 64\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_wr_config\&.__unnamed21__"
.PP 
Definition at line 169 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIwrite_traffic_enable: 1\fP 
.br
.PP
uint64_t \fIcontinuous_mode_enable: 1\fP 
.br
.PP
uint64_t \fIwaitfor_completion: 1\fP 
.br
.PP
uint64_t \fIpreread_sync_enable: 1\fP 
.br
.PP
uint64_t \fIpostread_sync_enable: 1\fP 
.br
.PP
uint64_t \fIdata_pattern: 2\fP 
.br
.PP
uint64_t \fIcl_evict_enable: 1\fP 
.br
.PP
uint64_t \fIopcode: 4\fP 
.br
.PP
uint64_t \fIline_repeat_count: 8\fP 
.br
.PP
uint64_t \fIreserved: 44\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_wr_addr_table_ctrl\&.__unnamed24__"
.PP 
Definition at line 187 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIenable_address_table: 1\fP 
.br
.PP
uint64_t \fIenable_address_stride: 1\fP 
.br
.PP
uint64_t \fIstride: 2\fP 
.br
.PP
uint64_t \fIreserved: 60\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_wr_addr_table_data\&.__unnamed27__"
.PP 
Definition at line 199 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIaddress_table_value: 64\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_rd_num_lines\&.__unnamed30__"
.PP 
Definition at line 208 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIread_num_lines: 16\fP 
.br
.PP
uint64_t \fIreserved: 48\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_rd_config\&.__unnamed33__"
.PP 
Definition at line 218 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIread_traffic_enable: 1\fP 
.br
.PP
uint64_t \fIcontinuous_mode_enable: 1\fP 
.br
.PP
uint64_t \fIwaitfor_completion: 1\fP 
.br
.PP
uint64_t \fIprewrite_sync_enable: 1\fP 
.br
.PP
uint64_t \fIpostwrite_sync_enable: 1\fP 
.br
.PP
uint64_t \fIdata_pattern: 2\fP 
.br
.PP
uint64_t \fIcl_evict_enable: 1\fP 
.br
.PP
uint64_t \fIopcode: 4\fP 
.br
.PP
uint64_t \fIline_repeat_count: 8\fP 
.br
.PP
uint64_t \fIreserved: 44\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_rd_addr_table_ctrl\&.__unnamed36__"
.PP 
Definition at line 236 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIenable_address_table: 1\fP 
.br
.PP
uint64_t \fIenable_address_stride: 1\fP 
.br
.PP
uint64_t \fIstride: 2\fP 
.br
.PP
uint64_t \fIreserved: 60\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_rd_addr_table_data\&.__unnamed39__"
.PP 
Definition at line 248 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIaddress_table_value: 64\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_err_status\&.__unnamed42__"
.PP 
Definition at line 257 of file cxl_host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIdata_error: 1\fP 
.br
.PP
uint64_t \fIrsvd1: 15\fP 
.br
.PP
uint64_t \fIerr_index: 16\fP 
.br
.PP
uint64_t \fIrsvd2: 32\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_dsm_basel\&.__unnamed97__"
.PP 
Definition at line 144 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint32_t \fIDsmBaseL: 32\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_dsm_baseh\&.__unnamed100__"
.PP 
Definition at line 155 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint32_t \fIDsmBaseH: 32\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_num_lines\&.__unnamed103__"
.PP 
Definition at line 166 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint32_t \fINumCacheLines: 32\fP 
.br
.PP
uint32_t \fIReserved: 32\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_cfg\&.__unnamed109__"
.PP 
Definition at line 194 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIDelayEn: 1\fP 
.br
.PP
uint64_t \fIContinuous: 1\fP 
.br
.PP
uint64_t \fITestMode: 3\fP 
.br
.PP
uint64_t \fIReqLen: 2\fP 
.br
.PP
uint64_t \fIAtomicFunc: 5\fP 
.br
.PP
uint64_t \fIEncoding: 2\fP 
.br
.PP
uint64_t \fIRsvd_19_14: 6\fP 
.br
.PP
uint64_t \fITputInterleave: 3\fP 
.br
.PP
uint64_t \fITestCfg: 5\fP 
.br
.PP
uint64_t \fIIntrOnErr: 1\fP 
.br
.PP
uint64_t \fIIntrTestMode: 1\fP 
.br
.PP
uint64_t \fIReqLen_High: 2\fP 
.br
.PP
uint64_t \fIRsvd_63_32: 32\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_inact_thresh\&.__unnamed112__"
.PP 
Definition at line 217 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint32_t \fIInactivtyThreshold: 32\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_interrupt0\&.__unnamed115__"
.PP 
Definition at line 228 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint32_t \fIapci_id: 16\fP 
.br
.PP
uint32_t \fIVectorNum: 16\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_swtest_msg\&.__unnamed118__"
.PP 
Definition at line 240 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIswtest_msg: 64\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_status0\&.__unnamed121__"
.PP 
Definition at line 251 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fInumWrites: 32\fP 
.br
.PP
uint64_t \fInumReads: 32\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_status1\&.__unnamed124__"
.PP 
Definition at line 263 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fInumPendWrites: 16\fP 
.br
.PP
uint64_t \fInumPendReads: 16\fP 
.br
.PP
uint64_t \fInumPendEmifWrites: 16\fP 
.br
.PP
uint64_t \fInumPendEmifReads: 16\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_error\&.__unnamed127__"
.PP 
Definition at line 278 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint64_t \fIerror: 32\fP 
.br
.PP
uint64_t \fIRsvd: 32\fP 
.br
.PP
.RE
.PP
.SH "struct host_exerciser::he_stride\&.__unnamed130__"
.PP 
Definition at line 290 of file host_exerciser\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
uint32_t \fIStride: 32\fP 
.br
.PP
.RE
.PP
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBopae::afu_test::afu\fP \fBhost_exerciser::test_afu\fP"

.PP
Definition at line 390 of file cxl_host_exerciser\&.h\&.
.SS "typedef \fBopae::afu_test::command\fP \fBhost_exerciser::test_command\fP"

.PP
Definition at line 391 of file cxl_host_exerciser\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHE_DFH \fP\fP
.TP
\fB\fIHE_ID_L \fP\fP
.TP
\fB\fIHE_ID_H \fP\fP
.TP
\fB\fIHE_DFH_RSVD0 \fP\fP
.TP
\fB\fIHE_DFH_RSVD1 \fP\fP
.TP
\fB\fIHE_SCRATCHPAD0 \fP\fP
.TP
\fB\fIHE_DSM_BASE \fP\fP
.TP
\fB\fIHE_CTL \fP\fP
.TP
\fB\fIHE_INFO \fP\fP
.TP
\fB\fIHE_WR_NUM_LINES \fP\fP
.TP
\fB\fIHE_WR_BYTE_ENABLE \fP\fP
.TP
\fB\fIHE_WR_CONFIG \fP\fP
.TP
\fB\fIHE_WR_ADDR_TABLE_CTRL \fP\fP
.TP
\fB\fIHE_WR_ADDR_TABLE_DATA \fP\fP
.TP
\fB\fIHE_RD_NUM_LINES \fP\fP
.TP
\fB\fIHE_RD_CONFIG \fP\fP
.TP
\fB\fIHE_RD_ADDR_TABLE_CTRL \fP\fP
.TP
\fB\fIHE_RD_ADDR_TABLE_DATA \fP\fP
.TP
\fB\fIHE_ERROR_STATUS \fP\fP
.TP
\fB\fIHE_ERROR_EXP_DATA \fP\fP
.TP
\fB\fIHE_ERROR_ACT_DATA0 \fP\fP
.TP
\fB\fIHE_ERROR_ACT_DATA1 \fP\fP
.TP
\fB\fIHE_ERROR_ACT_DATA2 \fP\fP
.TP
\fB\fIHE_ERROR_ACT_DATA3 \fP\fP
.TP
\fB\fIHE_ERROR_ACT_DATA4 \fP\fP
.TP
\fB\fIHE_ERROR_ACT_DATA5 \fP\fP
.TP
\fB\fIHE_ERROR_ACT_DATA6 \fP\fP
.TP
\fB\fIHE_ERROR_ACT_DATA7 \fP\fP
.PP
Definition at line 50 of file cxl_host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::he_rd_opcode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIRD_LINE_I \fP\fP
.TP
\fB\fIRD_LINE_S \fP\fP
.TP
\fB\fIRD_LINE_EM \fP\fP
.PP
Definition at line 82 of file cxl_host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::he_wr_opcode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIWR_LINE_I \fP\fP
.TP
\fB\fIWR_LINE_M \fP\fP
.TP
\fB\fIWR_PUSH_I \fP\fP
.TP
\fB\fIWR_BARRIER_FRNCE \fP\fP
.TP
\fB\fIWR_FLUSH_CL \fP\fP
.TP
\fB\fIWR_FLUSH_CL_HCOH \fP\fP
.TP
\fB\fIWR_FLUSH_CL_DCOH \fP\fP
.PP
Definition at line 89 of file cxl_host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::he_test_mode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHE_FPGA_RD_CACHE_HIT \fP\fP
.TP
\fB\fIHE_FPGA_WR_CACHE_HIT \fP\fP
.TP
\fB\fIHE_FPGA_RD_CACHE_MISS \fP\fP
.TP
\fB\fIHE_FPGA_WR_CACHE_MISS \fP\fP
.TP
\fB\fIHE_HOST_RD_CACHE_HIT \fP\fP
.TP
\fB\fIHE_HOST_WR_CACHE_HIT \fP\fP
.TP
\fB\fIHE_HOST_RD_CACHE_MISS \fP\fP
.TP
\fB\fIHE_HOST_WR_CACHE_MISS \fP\fP
.PP
Definition at line 282 of file cxl_host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::he_target\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHE_TARGET_HOST \fP\fP
.TP
\fB\fIHE_TARGET_FPGA \fP\fP
.PP
Definition at line 298 of file cxl_host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::he_cxl_latency\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHE_CXL_LATENCY_NONE \fP\fP
.TP
\fB\fIHE_CXL_RD_LATENCY \fP\fP
.TP
\fB\fIHE_CXL_WR_LATENCY \fP\fP
.TP
\fB\fIHE_CXL_RD_WR_LATENCY \fP\fP
.PP
Definition at line 305 of file cxl_host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::he_bisa_support\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHOSTMEM_BIAS \fP\fP
.TP
\fB\fIHOST_BIAS_NA \fP\fP
.TP
\fB\fIFPGAMEM_HOST_BIAS \fP\fP
.TP
\fB\fIFPGAMEM_DEVICE_BIAS \fP\fP
.PP
Definition at line 324 of file cxl_host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::he_cxl_dev\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHE_CXL_DEVICE0 \fP\fP
.TP
\fB\fIHE_CXL_DEVICE1 \fP\fP
.PP
Definition at line 343 of file cxl_host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::he_addrtable_size\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHE_ADDRTABLE_SIZE4096 \fP\fP
.TP
\fB\fIHE_ADDRTABLE_SIZE2048 \fP\fP
.TP
\fB\fIHE_ADDRTABLE_SIZE1024 \fP\fP
.TP
\fB\fIHE_ADDRTABLE_SIZE512 \fP\fP
.TP
\fB\fIHE_ADDRTABLE_SIZE256 \fP\fP
.TP
\fB\fIHE_ADDRTABLE_SIZE128 \fP\fP
.TP
\fB\fIHE_ADDRTABLE_SIZE64 \fP\fP
.TP
\fB\fIHE_ADDRTABLE_SIZE32 \fP\fP
.TP
\fB\fIHE_ADDRTABLE_SIZE16 \fP\fP
.TP
\fB\fIHE_ADDRTABLE_SIZE8 \fP\fP
.TP
\fB\fIHE_ADDRTABLE_SIZE4 \fP\fP
.TP
\fB\fIHE_ADDRTABLE_SIZE2 \fP\fP
.PP
Definition at line 354 of file cxl_host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::he_traffic_enable\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHE_ENABLE_TRAFFIC_STAGE \fP\fP
.TP
\fB\fIHE_SIP_SEQ_STAGE \fP\fP
.PP
Definition at line 370 of file cxl_host_exerciser\&.h\&.
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHE_DFH \fP\fP
.TP
\fB\fIHE_ID_L \fP\fP
.TP
\fB\fIHE_ID_H \fP\fP
.TP
\fB\fIHE_DFH_RSVD0 \fP\fP
.TP
\fB\fIHE_DFH_RSVD1 \fP\fP
.TP
\fB\fIHE_SCRATCHPAD0 \fP\fP
.TP
\fB\fIHE_SCRATCHPAD1 \fP\fP
.TP
\fB\fIHE_SCRATCHPAD2 \fP\fP
.TP
\fB\fIHE_DSM_BASEL \fP\fP
.TP
\fB\fIHE_DSM_BASEH \fP\fP
.TP
\fB\fIHE_SRC_ADDR \fP\fP
.TP
\fB\fIHE_DST_ADDR \fP\fP
.TP
\fB\fIHE_NUM_LINES \fP\fP
.TP
\fB\fIHE_CTL \fP\fP
.TP
\fB\fIHE_CFG \fP\fP
.TP
\fB\fIHE_INACT_THRESH \fP\fP
.TP
\fB\fIHE_INTERRUPT0 \fP\fP
.TP
\fB\fIHE_SWTEST_MSG \fP\fP
.TP
\fB\fIHE_STATUS0 \fP\fP
.TP
\fB\fIHE_STATUS1 \fP\fP
.TP
\fB\fIHE_ERROR \fP\fP
.TP
\fB\fIHE_STRIDE \fP\fP
.TP
\fB\fIHE_INFO0 \fP\fP
.PP
Definition at line 49 of file host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::host_exe_mode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHOST_EXEMODE_LPBK1 \fP\fP
.TP
\fB\fIHOST_EXEMODE_READ \fP\fP
.TP
\fB\fIHOST_EXEMODE_WRITE \fP\fP
.TP
\fB\fIHOST_EXEMODE_TRPUT \fP\fP
.PP
Definition at line 76 of file host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::hostexe_req_len\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHOSTEXE_CLS_1 \fP\fP
.TP
\fB\fIHOSTEXE_CLS_2 \fP\fP
.TP
\fB\fIHOSTEXE_CLS_4 \fP\fP
.TP
\fB\fIHOSTEXE_CLS_8 \fP\fP
.TP
\fB\fIHOSTEXE_CLS_16 \fP\fP
.PP
Definition at line 84 of file host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::hostexe_atomic_func\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHOSTEXE_ATOMIC_OFF \fP\fP
.TP
\fB\fIHOSTEXE_ATOMIC_FADD_4 \fP\fP
.TP
\fB\fIHOSTEXE_ATOMIC_FADD_8 \fP\fP
.TP
\fB\fIHOSTEXE_ATOMIC_SWAP_4 \fP\fP
.TP
\fB\fIHOSTEXE_ATOMIC_SWAP_8 \fP\fP
.TP
\fB\fIHOSTEXE_ATOMIC_CAS_4 \fP\fP
.TP
\fB\fIHOSTEXE_ATOMIC_CAS_8 \fP\fP
.PP
Definition at line 93 of file host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::hostexe_encoding\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHOSTEXE_ENCODING_DEFAULT \fP\fP
.TP
\fB\fIHOSTEXE_ENCODING_DM \fP\fP
.TP
\fB\fIHOSTEXE_ENCODING_PU \fP\fP
.TP
\fB\fIHOSTEXE_ENCODING_RANDOM \fP\fP
.PP
Definition at line 107 of file host_exerciser\&.h\&.
.SS "enum \fBhost_exerciser::hostexe_test_mode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHOSTEXE_TEST_ROLLOVER \fP\fP
.TP
\fB\fIHOSTEXE_TEST_TERMINATION \fP\fP
.PP
Definition at line 115 of file host_exerciser\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void host_exerciser::he_cache_thread (uint8_t * buf_ptr, uint64_t len)"

.PP
Definition at line 1265 of file cxl_he_cache_cmd\&.h\&.
.PP
References CL, g_stop_thread, and UNUSED_PARAM\&.
.PP
Referenced by host_exerciser::he_cache_cmd::he_run_host_rd_cache_hit_test(), and host_exerciser::he_cache_cmd::he_run_host_wr_cache_hit_test()\&.
.SH "Variable Documentation"
.PP 
.SS "const uint64_t host_exerciser::HELPBK_TEST_TIMEOUT = 30000\fC [static]\fP"

.PP
Definition at line 37 of file cxl_host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::he_cmd::he_wait_test_completion(), and host_exerciser::host_exerciser_cmd::he_wait_test_completion()\&.
.SS "const uint64_t host_exerciser::HELPBK_TEST_SLEEP_INVL = 100\fC [static]\fP"

.PP
Definition at line 38 of file cxl_host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::he_cmd::he_wait_test_completion(), and host_exerciser::host_exerciser_cmd::he_wait_test_completion()\&.
.SS "const uint64_t host_exerciser::CL = 64\fC [static]\fP"

.PP
Definition at line 39 of file cxl_host_exerciser\&.h\&.
.PP
Referenced by he_cache_thread(), host_exerciser::host_exerciser_cmd::he_compare_buffer(), host_exerciser::host_exerciser_cmd::he_dump_buffer(), host_exerciser::host_exerciser_cmd::he_init_src_buffer(), host_exerciser::host_exerciser_cmd::he_perf_counters(), and host_exerciser::host_exerciser_cmd::run()\&.
.SS "const uint64_t host_exerciser::KB = 1024\fC [static]\fP"

.PP
Definition at line 40 of file cxl_host_exerciser\&.h\&.
.SS "const uint64_t host_exerciser::MB = \fBKB\fP * 1024\fC [static]\fP"

.PP
Definition at line 41 of file cxl_host_exerciser\&.h\&.
.SS "const uint64_t host_exerciser::BUFFER_SIZE_2MB = 2 * \fBMB\fP\fC [static]\fP"

.PP
Definition at line 42 of file cxl_host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::he_cache_cmd::he_run_fpga_rd_cache_hit_test(), host_exerciser::he_cache_cmd::he_run_fpga_rd_cache_miss_test(), host_exerciser::he_cache_cmd::he_run_fpga_wr_cache_hit_test(), host_exerciser::he_cache_cmd::he_run_fpga_wr_cache_miss_test(), host_exerciser::he_cache_cmd::he_run_host_rd_cache_hit_test(), host_exerciser::he_cache_cmd::he_run_host_rd_cache_miss_test(), host_exerciser::he_cache_cmd::he_run_host_wr_cache_hit_test(), and host_exerciser::he_cache_cmd::he_run_host_wr_cache_miss_test()\&.
.SS "const uint64_t host_exerciser::BUFFER_SIZE_32KB = 32* \fBKB\fP\fC [static]\fP"

.PP
Definition at line 43 of file cxl_host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::he_cache_cmd::he_run_host_rd_cache_hit_test(), and host_exerciser::he_cache_cmd::he_run_host_wr_cache_hit_test()\&.
.SS "const uint64_t host_exerciser::FPGA_32KB_CACHE_LINES = (32 * \fBKB\fP) / 64\fC [static]\fP"

.PP
Definition at line 44 of file cxl_host_exerciser\&.h\&.
.SS "const uint64_t host_exerciser::FPGA_2MB_CACHE_LINES = (2 * \fBMB\fP) / 64\fC [static]\fP"

.PP
Definition at line 45 of file cxl_host_exerciser\&.h\&.
.SS "const uint64_t host_exerciser::FPGA_512CACHE_LINES = 512\fC [static]\fP"

.PP
Definition at line 46 of file cxl_host_exerciser\&.h\&.
.SS "const double host_exerciser::LATENCY_FACTOR = 2\&.5\fC [static]\fP"

.PP
Definition at line 47 of file cxl_host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::he_cache_cmd::he_run_fpga_rd_cache_hit_test(), host_exerciser::he_cache_cmd::he_run_fpga_rd_cache_miss_test(), host_exerciser::he_cache_cmd::he_run_host_rd_cache_hit_test(), and host_exerciser::he_cache_cmd::he_run_host_rd_cache_miss_test()\&.
.SS "const std::map<std::string, uint32_t> host_exerciser::he_test_modes"
\fBInitial value:\fP
.PP
.nf
= {
    {"fpgardcachehit", HE_FPGA_RD_CACHE_HIT},
    {"fpgawrcachehit", HE_FPGA_WR_CACHE_HIT},
    {"fpgardcachemiss", HE_FPGA_RD_CACHE_MISS},
    {"fpgawrcachemiss", HE_FPGA_WR_CACHE_MISS},
    {"hostrdcachehit", HE_HOST_RD_CACHE_HIT},
    {"hostwrcachehit", HE_HOST_WR_CACHE_HIT},
    {"hostrdcachemiss", HE_HOST_RD_CACHE_MISS},
    {"hostwrcachemiss", HE_HOST_WR_CACHE_MISS},
}
.fi
.PP
Definition at line 312 of file cxl_host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::he_cache_cmd::add_options()\&.
.SS "const std::map<std::string, uint32_t> host_exerciser::he_targets"
\fBInitial value:\fP
.PP
.nf
= {
    {"host", HE_TARGET_HOST},
    {"fpga", HE_TARGET_FPGA},
}
.fi
.PP
Definition at line 331 of file cxl_host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::he_cache_cmd::add_options(), and host_exerciser::he_cache_lpbk_cmd::add_options()\&.
.SS "const std::map<std::string, uint32_t> host_exerciser::he_bias"
\fBInitial value:\fP
.PP
.nf
= {
    {"host", HOSTMEM_BIAS},
    {"device", FPGAMEM_DEVICE_BIAS},
}
.fi
.PP
Definition at line 337 of file cxl_host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::he_cache_cmd::add_options()\&.
.SS "const std::map<std::string, uint32_t> host_exerciser::he_cxl_device"
\fBInitial value:\fP
.PP
.nf
= {
    {"/dev/dfl-cxl-cache\&.0", HE_CXL_DEVICE0},
    {"/dev/dfl-cxl-cache\&.1", HE_CXL_DEVICE1},
}
.fi
.PP
Definition at line 348 of file cxl_host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::he_cache_cmd::add_options()\&.
.SS "const std::map<std::string, uint32_t> host_exerciser::traffic_enable"
\fBInitial value:\fP
.PP
.nf
= {
    {"enable", HE_ENABLE_TRAFFIC_STAGE},
    {"skip", HE_SIP_SEQ_STAGE},
}
.fi
.PP
Definition at line 375 of file cxl_host_exerciser\&.h\&.
.SS "std::map<uint32_t, uint32_t> host_exerciser::addrtable_size"
\fBInitial value:\fP
.PP
.nf
= {
    {HE_ADDRTABLE_SIZE4096, 4096}, {HE_ADDRTABLE_SIZE2048, 2048},
    {HE_ADDRTABLE_SIZE1024, 1024}, {HE_ADDRTABLE_SIZE512, 512},
    {HE_ADDRTABLE_SIZE256, 256},   {HE_ADDRTABLE_SIZE128, 128},
    {HE_ADDRTABLE_SIZE64, 64},     {HE_ADDRTABLE_SIZE32, 32},
    {HE_ADDRTABLE_SIZE16, 16},     {HE_ADDRTABLE_SIZE8, 8},
    {HE_ADDRTABLE_SIZE4, 4},       {HE_ADDRTABLE_SIZE2, 2},

}
.fi
.PP
Definition at line 380 of file cxl_host_exerciser\&.h\&.
.SS "const uint64_t host_exerciser::HELPBK_TEST_TIMEOUT = 30000\fC [static]\fP"

.PP
Definition at line 38 of file host_exerciser\&.h\&.
.SS "const uint64_t host_exerciser::HELPBK_TEST_SLEEP_INVL = 100\fC [static]\fP"

.PP
Definition at line 39 of file host_exerciser\&.h\&.
.SS "const uint64_t host_exerciser::CL = 64\fC [static]\fP"

.PP
Definition at line 40 of file host_exerciser\&.h\&.
.SS "const uint64_t host_exerciser::KB = 1024\fC [static]\fP"

.PP
Definition at line 41 of file host_exerciser\&.h\&.
.SS "const uint64_t host_exerciser::MB = \fBKB\fP * 1024\fC [static]\fP"

.PP
Definition at line 42 of file host_exerciser\&.h\&.
.SS "const uint64_t host_exerciser::LOG2_CL = 6\fC [static]\fP"

.PP
Definition at line 43 of file host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::host_exerciser_cmd::cacheline_aligned_addr()\&.
.SS "const size_t host_exerciser::LPBK1_DSM_SIZE = 2 * \fBKB\fP\fC [static]\fP"

.PP
Definition at line 44 of file host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::host_exerciser_cmd::run(), and host_exerciser::host_exerciser_cmd::run_single_test()\&.
.SS "const size_t host_exerciser::LPBK1_BUFFER_SIZE = 64 * \fBKB\fP\fC [static]\fP"

.PP
Definition at line 45 of file host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::host_exerciser_cmd::he_perf_counters(), host_exerciser::host_exerciser_cmd::run(), and host_exerciser::host_exerciser_cmd::run_all_tests()\&.
.SS "const size_t host_exerciser::LPBK1_BUFFER_ALLOCATION_SIZE = 64 * \fBKB\fP\fC [static]\fP"

.PP
Definition at line 46 of file host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::host_exerciser_cmd::run()\&.
.SS "const std::map<std::string, uint32_t> host_exerciser::he_modes"
\fBInitial value:\fP
.PP
.nf
= {
  { "lpbk", HOST_EXEMODE_LPBK1},
  { "read", HOST_EXEMODE_READ},
  { "write", HOST_EXEMODE_WRITE},
  { "trput", HOST_EXEMODE_TRPUT},
}
.fi
.PP
Definition at line 315 of file host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::host_exerciser::host_exerciser()\&.
.SS "const std::map<std::string, uint32_t, \fBMapKeyComparator\fP> host_exerciser::he_req_cls_len"
\fBInitial value:\fP
.PP
.nf
= {
  { "cl_1", HOSTEXE_CLS_1},
  { "cl_2", HOSTEXE_CLS_2},
  { "cl_4", HOSTEXE_CLS_4},
  { "cl_8", HOSTEXE_CLS_8},
  { "cl_16", HOSTEXE_CLS_16},
}
.fi
.PP
Definition at line 333 of file host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::host_exerciser::host_exerciser(), and host_exerciser::host_exerciser_cmd::run_all_tests()\&.
.SS "const std::map<std::string, uint32_t> host_exerciser::he_req_atomic_func"
\fBInitial value:\fP
.PP
.nf
= {
  { "off", HOSTEXE_ATOMIC_OFF},
  { "fadd_4", HOSTEXE_ATOMIC_FADD_4},
  { "fadd_8", HOSTEXE_ATOMIC_FADD_8},
  { "swap_4", HOSTEXE_ATOMIC_SWAP_4},
  { "swap_8", HOSTEXE_ATOMIC_SWAP_8},
  { "cas_4", HOSTEXE_ATOMIC_CAS_4},
  { "cas_8", HOSTEXE_ATOMIC_CAS_8},
}
.fi
.PP
Definition at line 341 of file host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::host_exerciser::host_exerciser(), and host_exerciser::host_exerciser_cmd::run_all_tests()\&.
.SS "const std::map<std::string, uint32_t> host_exerciser::he_req_encoding"
\fBInitial value:\fP
.PP
.nf
= {
  { "default", HOSTEXE_ENCODING_DEFAULT},
  { "dm", HOSTEXE_ENCODING_DM},
  { "pu", HOSTEXE_ENCODING_PU},
  { "random", HOSTEXE_ENCODING_RANDOM},
}
.fi
.PP
Definition at line 351 of file host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::host_exerciser::host_exerciser()\&.
.SS "const std::map<std::string, uint32_t> \fBhost_exerciser::he_test_mode\fP"
\fBInitial value:\fP
.PP
.nf
= {
  { "test_rollover", HOSTEXE_TEST_ROLLOVER},
  { "test_termination", HOSTEXE_TEST_TERMINATION}
}
.fi
.PP
Definition at line 358 of file host_exerciser\&.h\&.
.SS "const char* host_exerciser::interleave_help"
\fBInitial value:\fP
.PP
.nf
= R"desc(Interleave requests pattern to use in throughput mode {0, 1, 2}
indicating one of the following series of read/write requests:
0: rd-wr-rd-wr
1: rd-rd-wr-wr
2: rd-rd-rd-rd-wr-wr-wr-wr)desc"
.fi
.PP
Definition at line 368 of file host_exerciser\&.h\&.
.PP
Referenced by host_exerciser::host_exerciser::host_exerciser()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for OPAE C API from the source code\&.
