<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="mem__alloc_8h" kind="file" language="C++">
    <compoundname>mem_alloc.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="vfio_8h" local="no">include/opae/vfio.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>include/opae/mem_alloc.h</label>
        <link refid="mem__alloc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/opae/mem_alloc.h</label>
        <link refid="mem__alloc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/opae/vfio.h</label>
        <link refid="vfio_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structmem__link" prot="public">mem_link</innerclass>
    <innerclass refid="structmem__alloc" prot="public">mem_alloc</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="mem__alloc_8h_1ac37e826046364bcbc938be357d088dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mem_alloc_init</definition>
        <argsstring>(struct mem_alloc *m)</argsstring>
        <name>mem_alloc_init</name>
        <param>
          <type>struct <ref refid="structmem__alloc" kindref="compound">mem_alloc</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a memory allocator object</para>
<para>After the call, the allocator is initialized but &quot;empty&quot;. To add allocatable memory regions, further initialize the allocator with <ref refid="mem__alloc_8h_1affae27295ea2cd566c06dba6fb34835f" kindref="member">mem_alloc_add_free()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">m</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the memory allocator to initialize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/opae/mem_alloc.h" line="68" column="6" declfile="include/opae/mem_alloc.h" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mem__alloc_8h_1af51e1559cd8eb3aa3cc0c433fcfcaa71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mem_alloc_destroy</definition>
        <argsstring>(struct mem_alloc *m)</argsstring>
        <name>mem_alloc_destroy</name>
        <param>
          <type>struct <ref refid="structmem__alloc" kindref="compound">mem_alloc</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a memory allocator object</para>
<para>Frees all of the allocator&apos;s internal resources.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the memory allocator to destroy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/opae/mem_alloc.h" line="77" column="6" declfile="include/opae/mem_alloc.h" declline="77" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mem__alloc_8h_1affae27295ea2cd566c06dba6fb34835f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mem_alloc_add_free</definition>
        <argsstring>(struct mem_alloc *m, uint64_t address, uint64_t size)</argsstring>
        <name>mem_alloc_add_free</name>
        <param>
          <type>struct <ref refid="structmem__alloc" kindref="compound">mem_alloc</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a memory region to an allocator.</para>
<para>The memory region is added to the allocatable space and is immediately ready for allocation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">m</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory allocator object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning address of the memory region. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the memory region. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero on error. Zero on success.</para>
</simplesect>
Example <programlisting filename=".c"><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__alloc" kindref="compound">mem_alloc</ref><sp/>m;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="mem__alloc_8h_1ac37e826046364bcbc938be357d088dda" kindref="member">mem_alloc_init</ref>(&amp;m);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="mem__alloc_8h_1affae27295ea2cd566c06dba6fb34835f" kindref="member">mem_alloc_add_free</ref>(&amp;m,<sp/>0x4000,<sp/>4096))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/opae/mem_alloc.h" line="101" column="5" declfile="include/opae/mem_alloc.h" declline="101" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mem__alloc_8h_1afdb4e638fb73f1199f739bdd4cad9b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mem_alloc_get</definition>
        <argsstring>(struct mem_alloc *m, uint64_t *address, uint64_t size)</argsstring>
        <name>mem_alloc_get</name>
        <param>
          <type>struct <ref refid="structmem__alloc" kindref="compound">mem_alloc</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate memory</para>
<para>Retrieve an available memory address for a free block that is at least size bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">m</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory allocator object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">address</parametername>
</parameternamelist>
<parameterdescription>
<para>The retrieved address for the allocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The request size in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero on error. Zero on success.</para>
</simplesect>
Example <programlisting filename=".c"><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__alloc" kindref="compound">mem_alloc</ref><sp/>m;</highlight></codeline>
<codeline><highlight class="normal">uint64_t<sp/>addr<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="mem__alloc_8h_1ac37e826046364bcbc938be357d088dda" kindref="member">mem_alloc_init</ref>(&amp;m);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="mem__alloc_8h_1affae27295ea2cd566c06dba6fb34835f" kindref="member">mem_alloc_add_free</ref>(&amp;m,<sp/>0x4000,<sp/>4096))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">if<sp/>(<ref refid="mem__alloc_8h_1afdb4e638fb73f1199f739bdd4cad9b16" kindref="member">mem_alloc_get</ref>(&amp;m,<sp/>&amp;addr,<sp/>4096))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>allocation<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/opae/mem_alloc.h" line="133" column="5" declfile="include/opae/mem_alloc.h" declline="133" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mem__alloc_8h_1a7f633432ea4eea5c671b37645a7270a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mem_alloc_put</definition>
        <argsstring>(struct mem_alloc *m, uint64_t address)</argsstring>
        <name>mem_alloc_put</name>
        <param>
          <type>struct <ref refid="structmem__alloc" kindref="compound">mem_alloc</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free memory</para>
<para>Release a previously-allocated memory block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">m</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory allocator object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero on error. Zero on success.</para>
</simplesect>
Example <programlisting filename=".c"><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__alloc" kindref="compound">mem_alloc</ref><sp/>m;</highlight></codeline>
<codeline><highlight class="normal">uint64_t<sp/>addr<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="mem__alloc_8h_1ac37e826046364bcbc938be357d088dda" kindref="member">mem_alloc_init</ref>(&amp;m);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="mem__alloc_8h_1affae27295ea2cd566c06dba6fb34835f" kindref="member">mem_alloc_add_free</ref>(&amp;m,<sp/>0x4000,<sp/>4096))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">if<sp/>(<ref refid="mem__alloc_8h_1afdb4e638fb73f1199f739bdd4cad9b16" kindref="member">mem_alloc_get</ref>(&amp;m,<sp/>&amp;addr,<sp/>4096))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>allocation<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">if<sp/>(<ref refid="mem__alloc_8h_1a7f633432ea4eea5c671b37645a7270a4" kindref="member">mem_alloc_put</ref>(&amp;m,<sp/>addr))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>free<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/opae/mem_alloc.h" line="169" column="5" declfile="include/opae/mem_alloc.h" declline="169" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright(c)<sp/>2020,<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/><sp/>and<sp/><sp/>use<sp/><sp/>in<sp/>source<sp/><sp/>and<sp/><sp/>binary<sp/><sp/>forms,<sp/><sp/>with<sp/><sp/>or<sp/><sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/><sp/>source<sp/>code<sp/><sp/>must<sp/>retain<sp/>the<sp/><sp/>above<sp/>copyright<sp/>notice,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/><sp/>of<sp/>Intel<sp/>Corporation<sp/><sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>may<sp/>be<sp/>used<sp/>to<sp/><sp/>endorse<sp/>or<sp/>promote<sp/><sp/>products<sp/>derived<sp/><sp/>from<sp/>this<sp/><sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/><sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/><sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIABLE<sp/><sp/>FOR<sp/><sp/>ANY<sp/><sp/>DIRECT,<sp/><sp/>INDIRECT,<sp/><sp/>INCIDENTAL,<sp/><sp/>SPECIAL,<sp/><sp/>EXEMPLARY,<sp/><sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/><sp/>DAMAGES<sp/><sp/>(INCLUDING,<sp/><sp/>BUT<sp/><sp/>NOT<sp/>LIMITED<sp/><sp/>TO,<sp/><sp/>PROCUREMENT<sp/><sp/>OF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/><sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/><sp/>OR<sp/>BUSINESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERRUPTION)<sp/><sp/>HOWEVER<sp/>CAUSED<sp/><sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/><sp/>OF<sp/>LIABILITY,<sp/><sp/>WHETHER<sp/>IN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONTRACT,<sp/><sp/>STRICT<sp/>LIABILITY,<sp/><sp/>OR<sp/>TORT<sp/><sp/>(INCLUDING<sp/>NEGLIGENCE<sp/><sp/>OR<sp/>OTHERWISE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/><sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__OPAE_MEM_ALLOC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__OPAE_MEM_ALLOC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="structmem__link" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__link" kindref="compound">mem_link</ref><sp/>{</highlight></codeline>
<codeline lineno="44" refid="structmem__link_1a4c968ceba2b3fd177cf209d5157b9cb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/><ref refid="structmem__link_1a4c968ceba2b3fd177cf209d5157b9cb6" kindref="member">address</ref>;</highlight></codeline>
<codeline lineno="45" refid="structmem__link_1ac99991a999b487d1a7afa70c3f9aadcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/><ref refid="structmem__link_1ac99991a999b487d1a7afa70c3f9aadcf" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="46" refid="structmem__link_1a1225e65e5841948cc0b81c533cfeaab7" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__link" kindref="compound">mem_link</ref><sp/>*<ref refid="structmem__link_1a1225e65e5841948cc0b81c533cfeaab7" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="47" refid="structmem__alloc_1af373018dfb1f354faf143b9fb04a3ca4" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__link" kindref="compound">mem_link</ref><sp/>*<ref refid="structmem__link_1a0b90e6b837df3dd0afab6221a87963cc" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="structmem__alloc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__alloc" kindref="compound">mem_alloc</ref><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__link" kindref="compound">mem_link</ref><sp/><ref refid="structmem__alloc_1a5921b4ec4ba3b8fa0087a5211802f995" kindref="member">free</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__link" kindref="compound">mem_link</ref><sp/><ref refid="structmem__alloc_1af373018dfb1f354faf143b9fb04a3ca4" kindref="member">allocated</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="mem__alloc_8h_1ac37e826046364bcbc938be357d088dda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__alloc_8h_1ac37e826046364bcbc938be357d088dda" kindref="member">mem_alloc_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmem__alloc" kindref="compound">mem_alloc</ref><sp/>*m);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="mem__alloc_8h_1af51e1559cd8eb3aa3cc0c433fcfcaa71" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__alloc_8h_1af51e1559cd8eb3aa3cc0c433fcfcaa71" kindref="member">mem_alloc_destroy</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmem__alloc" kindref="compound">mem_alloc</ref><sp/>*m);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="mem__alloc_8h_1affae27295ea2cd566c06dba6fb34835f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__alloc_8h_1affae27295ea2cd566c06dba6fb34835f" kindref="member">mem_alloc_add_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmem__alloc" kindref="compound">mem_alloc</ref><sp/>*m,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structmem__link_1a4c968ceba2b3fd177cf209d5157b9cb6" kindref="member">address</ref>,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structmem__link_1ac99991a999b487d1a7afa70c3f9aadcf" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="mem__alloc_8h_1afdb4e638fb73f1199f739bdd4cad9b16" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__alloc_8h_1afdb4e638fb73f1199f739bdd4cad9b16" kindref="member">mem_alloc_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmem__alloc" kindref="compound">mem_alloc</ref><sp/>*m,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>*<ref refid="structmem__link_1a4c968ceba2b3fd177cf209d5157b9cb6" kindref="member">address</ref>,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structmem__link_1ac99991a999b487d1a7afa70c3f9aadcf" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="mem__alloc_8h_1a7f633432ea4eea5c671b37645a7270a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__alloc_8h_1a7f633432ea4eea5c671b37645a7270a4" kindref="member">mem_alloc_put</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmem__alloc" kindref="compound">mem_alloc</ref><sp/>*m,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structmem__link_1a4c968ceba2b3fd177cf209d5157b9cb6" kindref="member">address</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__OPAE_MEM_ALLOC_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/opae/mem_alloc.h"/>
  </compounddef>
</doxygen>
