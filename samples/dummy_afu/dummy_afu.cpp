#include <iostream>
#include <opae/cxx/core/handle.h>
#include <CLI/CLI.hpp>

#include "afu.h"

// autogenerated includes
#include "dummy_afu.h"
#include "mmio.h"
#include "lpbk.h"
#include "dma.h"

const char *AFU_ID = "91c2a3a1-4a23-4e21-a7cd-2b36dbf2ed73";
typedef int (*test_fn)(opae::fpga::types::handle::ptr_t h);

int main(int argc, char* argv[])
{
  CLI::App app("dummy_afu");
  std::string guid, bdf;
  auto guid_opt = app.add_option("-g,--guid", guid, "GUID");
  auto bdf_opt = app.add_option("-b,--bdf", bdf, "<bus>:<device>.<function>");
  std::map<CLI::App*,test_fn> tests;

  auto mmio_cmd = app.add_subcommand("mmio", "run mmio test");
  tests[mmio_cmd] = run_mmio;
  auto lpbk_cmd = app.add_subcommand("lpbk", "run lpbk test");
  tests[lpbk_cmd] = run_lpbk;
  auto dma_cmd = app.add_subcommand("dma", "run dma test");
  tests[dma_cmd] = run_dma;

  CLI11_PARSE(app, argc, argv);
  auto afu_id = *guid_opt ? guid.c_str() : AFU_ID;
  auto afu_bdf = *bdf_opt ? bdf.c_str() : nullptr;
  auto h = open_accelerator(afu_id, afu_bdf);
  if (!h) {
    std::cerr << "No accelerator found\n";
    return 1;
  }

  int ret = 1;
  for (auto kv : tests) {
    if (*kv.first) {
      try {
        ret = kv.second(h);
      } catch(std::exception & ex) {
        std::cerr << "Test " << kv.first->get_display_name();
        std::cerr << ": FAIL (" << ex.what() << ")\n";
        return 1;
      }
      auto pass = !ret ? "PASS" : "FAIL";
      std::cout << "Test " << kv.first->get_display_name()
                << ": " << pass << "\n";
      break;
    }
  }

  return ret;
}