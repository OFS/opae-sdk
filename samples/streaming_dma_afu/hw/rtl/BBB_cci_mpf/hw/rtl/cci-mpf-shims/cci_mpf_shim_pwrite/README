Partial write emulation shim.

MPF adds the ability to request partial writes by generating a read-modify-write
sequence in response to an AFU-requested byte-masked write.  This is an
extension to CCI, which does not provide an interface for updating only part
of a line.

AFUs using MPF may request partial writes by:

  (1) Setting ENABLE_PARTIAL_WRITES(1) when instantiating module cci_mpf().

  (2) Setting the value of the "pwrite" header struct, defined in
      cci_mpf_if_pkg.sv.  The "pwrite" struct contains:

        isPartialWrite: Set to 0 for normal writes and 1 for masked writes.

        mask:           Active high byte-level mask controlling a cache
                        line write.  Bit 0 corresponds to the low byte in
                        the cache line.  A mask value of 1 causes the new
                        value to be written to memory.  The "mask" field is
                        ignored when isPartialWrite is 0.

The read-modify-write is not atomic.  Consider the following caveats:

  (1) MPF offers no protection against writes by the CPU to the same line
      during the read-modify-write sequence.

  (2) A race may exist during the read-modify-write sequence with other
      AFU-generated writes to the same line.  The MPF WRO (write/read order)
      module may be instantiated to protect against this race by
      setting ENFORCE_WR_ORDER(1) when instantiating module cci_mpf() or
      the AFU can wait for write ACKs and manage write-write hazards on
      its own.

  (3) A race may exist across memory channels, causing reads from addresses
      previously written by the FPGA to return stale data.  This may be
      true even when write ACKs have been received for all previous writes.
      Cross-channel write-read synchronization can be guaranteed only by
      emitting a write fence on eVC_VA, but this method causes significant
      throughput degradation when used frequently.  Applications requiring
      write-read synchronization may use the MPF VC_MAP shim by setting
      ENABLE_VC_MAP(1) when instantiating module cci_mpf().  In combination
      with MPF's WRO shim, VC_MAP guarantees write-read synchronization by
      consistently mapping a given address to a single memory channel.  Of
      course AFUs may choose to do similar mapping on their own, though
      VC_MAP is tuned to optimize the ratio of channels as a function of
      available bandwidth and changes the ratio dynamically in response to
      traffic patterns.
