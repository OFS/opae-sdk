name: C/C++ CI Build and Test

on:
  push:
    branches: [master]
    paths-ignore:
      - 'python/**'
      - 'tools/extra/fpgabist/**'
      - 'tools/extra/packager/*.py'
      - 'tools/extra/packager/metadata/**'
      - 'tools/extra/packager/test/*.py'
      - 'tools/extra/pac_hssi_config/*.py'
      - 'tools/extra/fpgadiag/**'
      - 'tools/utilities/**'
      - 'scripts/*.py'
      - 'platforms/scripts/platmgr/**'
      - '.github/workflows/python-static-analysis.yml'
  pull_request:
    branches: [master]
    paths-ignore:
      - 'python/**'
      - 'tools/extra/fpgabist/**'
      - 'tools/extra/packager/*.py'
      - 'tools/extra/packager/metadata/**'
      - 'tools/extra/packager/test/*.py'
      - 'tools/extra/pac_hssi_config/*.py'
      - 'tools/extra/fpgadiag/**'
      - 'tools/utilities/**'
      - 'scripts/*.py'
      - 'platforms/scripts/platmgr/**'
      - '.github/workflows/python-static-analysis.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-type: [Debug, Release, RelWithDebInfo]
    steps:
    - uses: actions/checkout@v2
    - name: update
      run: sudo apt-get update -y
    - name: Get Packages
      uses: mstksg/get-package@v1
      with:
        apt-get: uuid-dev libjson-c-dev libhwloc-dev lcov libtbb-dev
    - name: configure ${{ matrix.build-type }}
      run: mkdir ${{ github.workspace }}/.build && cd ${{ github.workspace }}/.build && cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
    - name: make ${{ matrix.build-type }}
      run: cd ${{ github.workspace }}/.build && make -j
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: update
      run: sudo apt-get update -y
    - name: Get Packages
      uses: mstksg/get-package@v1
      with:
        apt-get: uuid-dev libjson-c-dev libhwloc-dev lcov libtbb-dev
    - name: set hugepages
      run: sudo sysctl -w vm.nr_hugepages=8
    - name: run unit tests
      run: ${{ github.workspace }}/scripts/cover.sh
    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: unittests/coverage.info.cleaned
  build-doc:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: update
      run: sudo apt-get update -y
    - name: Get Packages
      uses: mstksg/get-package@v1
      with:
        apt-get: uuid-dev libjson-c-dev libhwloc-dev lcov libtbb-dev doxygen python3-dev
    - name: Setup Python
      uses: actions/setup-python@v2.1.4
      with:
        # Version range or exact version of a Python version to use, using SemVer's version range syntax.
        python-version: 3.8
        # The target architecture (x86, x64) of the Python interpreter.
        architecture: x64
        # Used to pull python distributions from actions/python-versions. Since there's a default, this is typically not supplied by the user.
        token: ${{ github.token }}  
    - name: Build Documentation
      run: ./scripts/build-documentation.sh
    - name: Upload latest to github.io
      if: ${{ github.ref == 'refs/heads/master' }}
      working-directory: ${{ github.workspace }}/mybuild_docs
      run: ${{ github.workspace }}/scripts/push-documentation.sh latest
    - name: Upload tag to github.io
      if: startsWith(github.ref, 'refs/tags/')
      working-directory: ${{ github.workspace }}/mybuild_docs
      run: ${{ github.workspace }}/scripts/push-documentation.sh "${GITHUB_TAG##*/}"

