#!/usr/bin/env python
# Copyright(c) 2013-2017, Intel Corporation
#
# Redistribution  and  use  in source  and  binary  forms,  with  or  without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of  source code  must retain the  above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name  of Intel Corporation  nor the names of its contributors
#   may be used to  endorse or promote  products derived  from this  software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO,  THE
# IMPLIED WARRANTIES OF  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT  SHALL THE COPYRIGHT OWNER  OR CONTRIBUTORS BE
# LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR
# CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT LIMITED  TO,  PROCUREMENT  OF
# SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE,  DATA, OR PROFITS;  OR BUSINESS
# INTERRUPTION)  HOWEVER CAUSED  AND ON ANY THEORY  OF LIABILITY,  WHETHER IN
# CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

#
# Create a Quartus build environment in a new directory and configure it for
# building an AFU.  Run "afu_synth_setup_std --help" for details.
#
# This standard version of afu_synth_setup may be used by multiple FPGA
# platform releases.  Typically, a platform release will provide an
# afu_synth_setup in the release's bin directory that is a stub.  The stub
# sets FPGA_RELEASE_DIR and invokes this common script.
#

import sys
import os
import stat
import errno
import shutil
import subprocess
from os.path import dirname, realpath, sep
import subprocess


def errorExit(msg):
    sys.stderr.write('Error: {0}\n'.format(msg))
    sys.exit(1)


# The root directory of a system release.
def getSysReleasePath(args):
    if (args.release is not None):
        release_dir = args.release
    elif ('FPGA_RELEASE_DIR' in os.environ):
        release_dir = os.environ['FPGA_RELEASE_DIR']
    else:
        # Parent directory of the running script
        release_dir = os.path.dirname(
            os.path.dirname(os.path.realpath(sys.argv[0])))

    # Confirm that the path looks reasonable
    if (not os.path.exists(os.path.join(release_dir,
                                        'hw/lib/fme-ifc-id.txt'))):
        errorExit("{0} is not a release directory".format(release_dir))

    return release_dir


# Run a command and get the output
def commands_list_getoutput(cmd):
    if sys.version_info < (2, 7):
        return commands.getoutput(' '.join(cmd))
    else:
        try:
            byte_out = subprocess.check_output(cmd)
            str_out = byte_out.decode("utf-8")
        except OSError as e:
            if e.errno == os.errno.ENOENT:
                msg = cmd[0] + " not found on PATH!"
                errorExit(msg)
            else:
                raise
        except subprocess.CalledProcessError as e:
            sys.stderr.write(e.output)
            raise

        return str_out


# Copy base build environment to target directory
def copy_build_env(base_src, dst, force):
    # Target directory can't exist (unless force is set)
    dst = dst.rstrip(os.path.sep)
    if dst == '':
        errorExit('Target directory not set')

    if (os.path.exists(dst)):
        if (os.path.islink(dst)):
            errorExit('Target ({0}) is a link.'.format(dst))
        if (not force):
            errorExit('Target ({0}) already exists.'.format(dst))
        if (os.path.isdir(dst)):
            shutil.rmtree(dst)
        else:
            os.remove(dst)
    os.mkdir(dst)

    # Copy build to target directory
    build_src = os.path.join(base_src, 'hw/lib/build')
    build_dst = os.path.join(dst, 'build')
    print('Copying build from {0}...'.format(build_src))
    try:
        shutil.copytree(build_src, build_dst)
    except Exception:
        shutil.rmtree(dst)
        print('Failed to copy {0} to {1}'.format(build_src, build_dst))
        raise

    # Make target "hw" directory
    os.mkdir(os.path.join(dst, 'hw'))

    # Make a scripts directory with clean.sh and run.sh
    scripts_src = os.path.abspath(os.path.join(base_src, 'bin'))
    scripts_dst = os.path.join(dst, 'scripts')
    os.mkdir(scripts_dst)
    os.symlink(os.path.join(scripts_src, 'clean.sh'),
               os.path.join(scripts_dst, 'clean.sh'))
    run_sh = os.path.join(scripts_dst, 'run.sh')
    with open(run_sh, 'w') as f:
        f.write('#!/bin/sh\n')
        f.write('export BBS_LIB_PATH=${BBS_LIB_PATH:-"' +
                os.path.join(base_src, 'hw/lib') + '"}\n')
        f.write(os.path.join(scripts_src, 'run.sh') + ' $*\n')
    st = os.stat(run_sh)
    os.chmod(run_sh, st.st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)


#
# Configure the build environment
#
def setup_build(args):
    # Does the sources file exist?
    if (not os.path.exists(args.sources)):
        errorExit("Sources file {0} not found.".format(args.sources))

    # Transform path to sources relative to build directory
    is_abs = os.path.isabs(args.sources)
    if (is_abs):
        sources = args.sources
    else:
        sources = os.path.relpath(args.sources,
                                  os.path.join(args.dst, 'build'))

    # Get the JSON file
    os.chdir(os.path.join(args.dst, 'hw'))
    try:
        cmd = ['rtl_src_config']
        if (is_abs):
            cmd.append('--abs')
        cmd.append('--json')
        cmd.append(sources)
        json = commands_list_getoutput(cmd)
    except Exception:
        errorExit("Failed to read sources from {0}".format(sources))

    json = json.strip().split('\n')
    if (len(json) == 0):
        errorExit("No AFU JSON file found in {0}".format(sources))
    if (len(json) > 1):
        errorExit("More than one AFU JSON file found in {0}".format(sources))

    json = json[0]
    os.symlink(json, os.path.basename(json))

    # Configure sources
    print('Changing to directory ' + os.path.join(args.dst, 'build'))
    os.chdir('../build')
    cmd = ['rtl_src_config']
    if (is_abs):
        cmd.append('--abs')
    cmd.append('--qsf')
    cmd.append(sources)
    os.system(' '.join(cmd) + ' > ../hw/afu.qsf')

    # Configure the platform
    cmd = 'afu_platform_config --qsf --tgt platform'
    cmd += ' --src=' + json + ' '

    # Was the platform specified on the commadn line?
    if (args.plat):
        cmd += args.plat
    else:
        # Get the platform from the release
        plat_class_file = os.path.join(getSysReleasePath(args),
                                       'hw/lib/fme-platform-class.txt')
        with open(plat_class_file) as f:
            cmd += f.read().strip()

    os.system(cmd)

    # Extract JSON info for Verilog
    cmd = 'afu_json_mgr json-info --afu-json=' + json
    cmd += ' --verilog-hdr=../hw/afu_json_info.vh'
    os.system(cmd)


def main():
    import argparse
    parser = argparse.ArgumentParser(
        description="""Generate a Quartus build environment for an AFU.
                       A build environment is instantiated from a release
                       and then configured for the specified AFU.
                       AFU source files are specified in a text file that is
                       parsed by rtl_src_config, which is part of the
                       OPAE base environment.""")

    parser.add_argument('-s', '--sources', required=1,
                        help="""AFU source specification file that will be
                                passed to rtl_src_config.  See "rtl_src_config
                                --help" for the file's syntax.  rtl_src_config
                                translates the source list into either Quartus
                                or RTL simulator syntax.""")
    parser.add_argument('-p', '--plat', default=None,
                        help="""FPGA platform to simulate.""")
    parser.add_argument('-r', '--release', default=None,
                        help="""FPGA platform release directory.  If not
                                specified, the environment variable
                                FPGA_RELEASE_DIR is checked first.  If not
                                defined, the script is assumed to be in the
                                top level 'bin' directory of a release.""")
    parser.add_argument('-f', '--force',
                        action='store_true',
                        help="""Overwrite target directory if it exists.""")
    parser.add_argument('dst',
                        help="""Target directory path (directory must
                                not exist).""")

    args = parser.parse_args()

    # Where is the base environment
    base_src = getSysReleasePath(args)

    copy_build_env(base_src, args.dst, args.force)
    setup_build(args)


if __name__ == '__main__':
    main()
