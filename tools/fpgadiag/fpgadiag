#! /usr/bin/env python
# Copyright(c) 2017, Intel Corporation
#
# Redistribution  and  use  in source  and  binary  forms,  with  or  without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of  source code  must retain the  above copyright notice,
# this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# * Neither the name  of Intel Corporation  nor the names of its contributors
# may be used to  endorse or promote  products derived  from this  software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO,  THE
# IMPLIED WARRANTIES OF  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT  SHALL THE COPYRIGHT OWNER  OR CONTRIBUTORS BE
# LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR
# CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT LIMITED  TO,  PROCUREMENT  OF
# SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE,  DATA, OR PROFITS;  OR BUSINESS
# INTERRUPTION)  HOWEVER CAUSED  AND ON ANY THEORY  OF LIABILITY,  WHETHER IN
# CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import os
import argparse
import subprocess
from subprocess import CalledProcessError

cwd = os.path.dirname(os.path.realpath(__file__))
cmd_list = ['lpbk1', 'read', 'write', 'trput', 'sw', 'mb1']
cmd_map = {'lpbk1': ['nlb0'],
           'read': ['nlb3', '--mode=read'],
           'write': ['nlb3', '--mode=write'],
           'trput': ['nlb3', '--mode=trput'],
           'sw': ['nlb7'],
           'mb1': ['mb1']}

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target',
                        default='fpga',
                        choices=['fpga', 'ase'],
                        help='choose target')
    parser.add_argument('-m', '--mode',
                        choices=cmd_list,
                        required=True,
                        help='choose test mode')

    args, leftover = parser.parse_known_args()

    cmdline = cmd_map[args.mode] + leftover

    cmdline[0] = os.path.join(cwd, cmdline[0])
    cmdline = cmdline + ['-t', args.target] + leftover
    cmdline = ' '.join(cmdline)

    try:
        subprocess.check_call(cmdline, shell=True)
    except CalledProcessError as e:
        exit(e.returncode)
